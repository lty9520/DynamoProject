<Workspace Version="0.9.1.4062" X="1005.46995801427" Y="1301.03129830705" zoom="0.184958052842982" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap>
    <ClassMap partialName="Point" resolvedName="Autodesk.DesignScript.Geometry.Point" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Polygon" resolvedName="Autodesk.DesignScript.Geometry.Polygon" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="PolyCurve" resolvedName="Autodesk.DesignScript.Geometry.PolyCurve" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Cuboid" resolvedName="Autodesk.DesignScript.Geometry.Cuboid" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Surface" resolvedName="Autodesk.DesignScript.Geometry.Surface" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="Geometry" resolvedName="Autodesk.DesignScript.Geometry.Geometry" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="PolySurface" resolvedName="Autodesk.DesignScript.Geometry.PolySurface" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Solid" resolvedName="Autodesk.DesignScript.Geometry.Solid" assemblyName="ProtoGeometry.dll" />
    <ClassMap partialName="Cylinder" resolvedName="Autodesk.DesignScript.Geometry.Cylinder" assemblyName="ProtoGeometry.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="b4507afa-aec1-48bf-938a-bb1176acde48" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-8553.87026169732" y="3177.17874885186" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//创建四边形面&#xA;//p-&gt;面的中心点&#xA;//r-&gt;面的边长&#xA;//z-&gt;面的位置z值&#xA;def createQuadCenter(p, r)&#xA;{&#xA;	//	.p1----.p2&#xA;	//	|		|&#xA;	//	|	p	|&#xA;	//	|		|&#xA;	//	|		|&#xA;	//	.p4----.p3&#xA;	x1 = p.X - r;&#xA;	y1 = p.Y - r;&#xA;	z1 = p.Z;&#xA;&#xA;	//test=p.X;&#xA;&#xA;	x2 = p.X + r;&#xA;	y2 = p.Y - r;&#xA;	z2 = p.Z;&#xA;&#xA;	x3 = p.X + r;&#xA;	y3 = p.Y + r;&#xA;	z3 = p.Z;&#xA;&#xA;	x4 = p.X - r;&#xA;	y4 = p.Y + r;&#xA;	z4 = p.Z;&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;	p2 = Point.ByCoordinates(x2, y2, z2);&#xA;	p3 = Point.ByCoordinates(x3, y3, z3);&#xA;	p4 = Point.ByCoordinates(x4, y4, z4);&#xA;&#xA;	poly = Polygon.ByPoints({p1, p2, p3, p4});&#xA;&#xA;	//l1 = List.FirstItem(p1);&#xA;	//l1 = List.AddItemToEnd(p2);&#xA;	//l1 = List.AddItemToEnd(p3);&#xA;	//l1 = List.AddItemToEnd(p4);&#xA;&#xA;	//sur = Surface.ByPatch(ploy);&#xA;&#xA;	return = poly;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="bbd1818f-055a-4df0-aff7-d090082aed1e" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-3467" y="-3978" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="Point.ByCoordinates(0, 0, 0);&#xA;10;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="594eed4b-c534-4b06-b22e-4a8c3387650e" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-2997.07757029562" y="-4114.00435037579" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="point;&#xA;r;&#xA;&#xA;geometry = [Imperative]&#xA;{&#xA;	l = {};&#xA;	i = 5;&#xA;	while( i &gt; 0 )&#xA;	{&#xA;&#xA;		r = r + 1;&#xA;		l = List.AddItemToEnd(createQuadCenter(point, r), l);&#xA;&#xA;		i = i - 1;&#xA;&#xA;	}&#xA;&#xA;	return = l;&#xA;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="e33ede6c-2584-4453-a710-d069a8839c71" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-7947.33775720479" y="3205.14499488474" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//创建梯形平面&#xA;//p-&gt;短边中心点&#xA;//d1-&gt;短边边长&#xA;//d2-&gt;长边边长&#xA;//h-&gt;高&#xA;//d-&gt;倾斜进深&#xA;//direc-&gt;倾斜方向&#xA;def createTrape(p, d1, d2, h, d, direc)&#xA;{&#xA;&#xA;	x1 = 0;&#xA;	x2 = 0;&#xA;	x3 = 0;&#xA;	x4 = 0;&#xA;	y1 = 0;&#xA;	y2 = 0;&#xA;	y3 = 0;&#xA;	y4 = 0;&#xA;	z1 = 0;&#xA;	z2 = 0;&#xA;	z3 = 0;&#xA;	z4 = 0;&#xA;	geometry = [Imperative]&#xA;	{&#xA;		if(direc == &quot;y-&quot;)&#xA;		{&#xA;			x1 = p.X - d1 / 2;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X + d1 / 2;&#xA;			y2 = p.Y;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X + d2 / 2;&#xA;			y3 = p.Y - d;&#xA;			z3 = p.Z + h;&#xA;&#xA;			x4 = p.X - d2 / 2;&#xA;			y4 = p.Y - d;&#xA;			z4 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;y+&quot;)&#xA;		{&#xA;			x1 = p.X - d1 / 2;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X + d1 / 2;&#xA;			y2 = p.Y;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X + d2 / 2;&#xA;			y3 = p.Y + d;&#xA;			z3 = p.Z + h;&#xA;&#xA;			x4 = p.X - d2 / 2;&#xA;			y4 = p.Y + d;&#xA;			z4 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;x-&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y - d1 / 2;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X;&#xA;			y2 = p.Y+ d1 / 2;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X - d;&#xA;			y3 = p.Y + d2 / 2;&#xA;			z3 = p.Z + h;&#xA;&#xA;			x4 = p.X - d;&#xA;			y4 = p.Y - d2 / 2;&#xA;			z4 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;x+&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y- d1 / 2;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X;&#xA;			y2 = p.Y+ d1 / 2;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X + d;&#xA;			y3 = p.Y + d2 / 2;&#xA;			z3 = p.Z + h;&#xA;&#xA;			x4 = p.X + d;&#xA;			y4 = p.Y - d2 / 2;&#xA;			z4 = p.Z + h;&#xA;		}&#xA;&#xA;	}&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;	p2 = Point.ByCoordinates(x2, y2, z2);&#xA;	p3 = Point.ByCoordinates(x3, y3, z3);&#xA;	p4 = Point.ByCoordinates(x4, y4, z4);&#xA;&#xA;	poly = Polygon.ByPoints({p1, p2, p3, p4});&#xA;&#xA;	return = poly;&#xA;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="f175e972-ff1d-42e6-a572-0733af4a5991" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-7263.35313919434" y="3196.97217325321" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//创建栌枓U型侧面&#xA;//p-&gt;底边中心定位点&#xA;//w-&gt;长边长&#xA;//w1-&gt;顶部短边长&#xA;//h1-&gt;高（h - h1)&#xA;//h2-&gt;中间U型部分高&#xA;//direc-&gt;绘制方向&#xA;def createUPlane(p, w, w1, h1, h2, direc)&#xA;{&#xA;	x1 =0;&#xA;	y1 =0;&#xA;	z1 =0;&#xA;	x2 =0;&#xA;	y2 =0;&#xA;	z2 =0;&#xA;	x3 =0;&#xA;	y3 =0;&#xA;	z3 =0;&#xA;	x4 =0;&#xA;	y4 =0;&#xA;	z4 =0;&#xA;	x5 =0;&#xA;	y5 =0;&#xA;	z5 =0;&#xA;	x6 =0;&#xA;	y6 =0;&#xA;	z6 =0;&#xA;	x7 =0;&#xA;	y7 =0;&#xA;	z7 =0;&#xA;	x8 =0;&#xA;	y8 =0;&#xA;	z8 =0;&#xA;&#xA;	geometry = [Imperative]&#xA;	{&#xA;&#xA;		if(direc == &quot;x&quot;)&#xA;		{&#xA;			x1 = p.X - w / 2;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X + w / 2;&#xA;			y2 = p.Y;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X + w / 2;&#xA;			y3 = p.Y;&#xA;			z3 = p.Z + h1;&#xA;&#xA;			x4 = p.X + w1 / 2;&#xA;			y4 = p.Y;&#xA;			z4 = p.Z + h1;&#xA;&#xA;			x5 = p.X + w1 / 2;&#xA;			y5 = p.Y;&#xA;			z5 = p.Z + h1 - h2;&#xA;&#xA;			x6 = p.X - w1 / 2;&#xA;			y6 = p.Y;&#xA;			z6 = p.Z + h1 - h2;&#xA;&#xA;			x7 = p.X - w1 / 2;&#xA;			y7 = p.Y;&#xA;			z7 = p.Z + h1;&#xA;&#xA;			x8 = p.X - w / 2;&#xA;			y8 = p.Y;&#xA;			z8 = p.Z + h1;&#xA;		}&#xA;&#xA;		if(direc == &quot;y&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y - w / 2;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X;&#xA;			y2 = p.Y + w / 2;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X;&#xA;			y3 = p.Y + w / 2;&#xA;			z3 = p.Z + h1;&#xA;&#xA;			x4 = p.X;&#xA;			y4 = p.Y + w1 / 2;&#xA;			z4 = p.Z + h1;&#xA;&#xA;			x5 = p.X;&#xA;			y5 = p.Y + w1 / 2;&#xA;			z5 = p.Z + h1 - h2;&#xA;&#xA;			x6 = p.X;&#xA;			y6 = p.Y - w1 / 2;&#xA;			z6 = p.Z + h1 - h2;&#xA;&#xA;			x7 = p.X;&#xA;			y7 = p.Y - w1 / 2;&#xA;			z7 = p.Z + h1;&#xA;&#xA;			x8 = p.X;&#xA;			y8 = p.Y - w / 2;&#xA;			z8 = p.Z + h1;&#xA;		}&#xA;&#xA;	}&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;	p2 = Point.ByCoordinates(x2, y2, z2);&#xA;	p3 = Point.ByCoordinates(x3, y3, z3);&#xA;	p4 = Point.ByCoordinates(x4, y4, z4);&#xA;	p5 = Point.ByCoordinates(x5, y5, z5);&#xA;	p6 = Point.ByCoordinates(x6, y6, z6);&#xA;	p7 = Point.ByCoordinates(x7, y7, z7);&#xA;	p8 = Point.ByCoordinates(x8, y8, z8);&#xA;&#xA;	poly = Polygon.ByPoints({p1, p2, p3, p4, p5, p6, p7, p8});&#xA;&#xA;	return = poly;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="3c56039a-0c02-4545-a8c1-1ddeaba22086" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-6467.44510283836" y="3205.18673244767" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//创建卷杀曲线&#xA;//p-&gt;定位点&#xA;//b1-&gt;卷杀部分长&#xA;//b2-&gt;其余部分长&#xA;//m-&gt;卷杀段数&#xA;//h1-&gt;卷杀部分高&#xA;//h-&gt;整体高&#xA;//direc-&gt;方向&#xA;def createJuanshaCurve(p, b1, b2, m, h1, h, direc)&#xA;{&#xA;	x1 = 0;&#xA;	y1 = 0;&#xA;	z1 = 0;&#xA;	x2 = 0;&#xA;	y2 = 0;&#xA;	z2 = 0;&#xA;	x3 = 0;&#xA;	y3 = 0;&#xA;	z3 = 0;&#xA;	x4 = 0;&#xA;	y4 = 0;&#xA;	z4 = 0;&#xA;	x5 = 0;&#xA;	y5 = 0;&#xA;	z5 = 0;&#xA;	x6 = 0;&#xA;	y6 = 0;&#xA;	z6 = 0;&#xA;	x7 = 0;&#xA;	y7 = 0;&#xA;	z7 = 0;&#xA;	x8 = 0;&#xA;	y8 = 0;&#xA;	z8 = 0;&#xA;	geometry = [Imperative]&#xA;	{&#xA;&#xA;		if(direc == &quot;x+&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X + b2;&#xA;			y2 = p.Y;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X + b2 + ((4 / 10) * b1);&#xA;			y3 = p.Y;&#xA;			z3 = p.Z + ((1 / 10) * h1);&#xA;&#xA;			x4 = p.X + b2 + ((7 / 10) * b1);&#xA;			y4 = p.Y;&#xA;			z4 = p.Z + ((3 / 10) * h1);&#xA;&#xA;			x5 = p.X + b2 + ((9 / 10) * b1);&#xA;			y5 = p.Y;&#xA;			z5 = p.Z + ((6 / 10) * h1);&#xA;&#xA;			x6 = p.X + b2 + b1;&#xA;			y6 = p.Y;&#xA;			z6 = p.Z + h1;&#xA;&#xA;			x7 = p.X + b2 + b1;&#xA;			y7 = p.Y;&#xA;			z7 = p.Z + h;&#xA;&#xA;			x8 = p.X;&#xA;			y8 = p.Y;&#xA;			z8 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;x-&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X - b2;&#xA;			y2 = p.Y;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X - b2 - ((4 / 10) * b1);&#xA;			y3 = p.Y;&#xA;			z3 = p.Z + ((1 / 10) * h1);&#xA;&#xA;			x4 = p.X - b2 - ((7 / 10) * b1);&#xA;			y4 = p.Y;&#xA;			z4 = p.Z + ((3 / 10) * h1);&#xA;&#xA;			x5 = p.X - b2 - ((9 / 10) * b1);&#xA;			y5 = p.Y;&#xA;			z5 = p.Z + ((6 / 10) * h1);&#xA;&#xA;			x6 = p.X - b2 - b1;&#xA;			y6 = p.Y;&#xA;			z6 = p.Z + h1;&#xA;&#xA;			x7 = p.X - b2 - b1;&#xA;			y7 = p.Y;&#xA;			z7 = p.Z + h;&#xA;&#xA;			x8 = p.X;&#xA;			y8 = p.Y;&#xA;			z8 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;y+&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X;&#xA;			y2 = p.Y + b2;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X;&#xA;			y3 = p.Y + b2 + ((4 / 10) * b1);&#xA;			z3 = p.Z + ((1 / 10) * h1);&#xA;&#xA;			x4 = p.X;&#xA;			y4 = p.Y + b2 + ((7 / 10) * b1);&#xA;			z4 = p.Z + ((3 / 10) * h1);&#xA;&#xA;			x5 = p.X;&#xA;			y5 = p.Y + b2 + ((9 / 10) * b1);&#xA;			z5 = p.Z + ((6 / 10) * h1);&#xA;&#xA;			x6 = p.X;&#xA;			y6 = p.Y + b2 + b1;&#xA;			z6 = p.Z + h1;&#xA;&#xA;			x7 = p.X;&#xA;			y7 = p.Y + b2 + b1;&#xA;			z7 = p.Z + h;&#xA;&#xA;			x8 = p.X;&#xA;			y8 = p.Y;&#xA;			z8 = p.Z + h;&#xA;		}&#xA;&#xA;		if(direc == &quot;y-&quot;)&#xA;		{&#xA;			x1 = p.X;&#xA;			y1 = p.Y;&#xA;			z1 = p.Z;&#xA;&#xA;			x2 = p.X;&#xA;			y2 = p.Y - b2;&#xA;			z2 = p.Z;&#xA;&#xA;			x3 = p.X;&#xA;			y3 = p.Y - b2 - ((4 / 10) * b1);&#xA;			z3 = p.Z + ((1 / 10) * h1);&#xA;&#xA;			x4 = p.X;&#xA;			y4 = p.Y - b2 - ((7 / 10) * b1);&#xA;			z4 = p.Z + ((3 / 10) * h1);&#xA;&#xA;			x5 = p.X;&#xA;			y5 = p.Y - b2 - ((9 / 10) * b1);&#xA;			z5 = p.Z + ((6 / 10) * h1);&#xA;&#xA;			x6 = p.X;&#xA;			y6 = p.Y - b2 - b1;&#xA;			z6 = p.Z + h1;&#xA;&#xA;			x7 = p.X;&#xA;			y7 = p.Y - b2 - b1;&#xA;			z7 = p.Z + h;&#xA;&#xA;			x8 = p.X;&#xA;			y8 = p.Y;&#xA;			z8 = p.Z + h;&#xA;		}&#xA;	}&#xA;&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;	p2 = Point.ByCoordinates(x2, y2, z2);&#xA;	p3 = Point.ByCoordinates(x3, y3, z3);&#xA;	p4 = Point.ByCoordinates(x4, y4, z4);&#xA;	p5 = Point.ByCoordinates(x5, y5, z5);&#xA;	p6 = Point.ByCoordinates(x6, y6, z6);&#xA;	p7 = Point.ByCoordinates(x7, y7, z7);&#xA;	p8 = Point.ByCoordinates(x8, y8, z8);&#xA;&#xA;	poly = Polygon.ByPoints({p1, p2, p3, p4, p5, p6, p7, p8});&#xA;&#xA;	curve = PolyCurve.ByPoints({p1, p2, p3, p4, p5, p6, p7, p8}, true);&#xA;&#xA;	return = curve;&#xA;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="c28abe09-46d8-4f3e-b911-cf862febad42" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-5719.37812752762" y="3212.97909677383" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//创建单卷杀长方体栱部分，&#xA;//cur-&gt;边界曲线&#xA;//width-&gt;长方体长度&#xA;//direction-&gt;延伸方向&#xA;def createCubiod(cur, width, direction)&#xA;{&#xA;	x1 = 0;&#xA;	y1 = 0;&#xA;	z1 = 0;&#xA;	x2 = 0;&#xA;	y2 = 0;&#xA;	z2 = 0;&#xA;&#xA;	geometry = [Imperative]&#xA;	{&#xA;		if(direction == &quot;x+&quot;)&#xA;		{&#xA;			x1 = cur.StartPoint.X + width;&#xA;			y1 = cur.StartPoint.Y;&#xA;			z1 = cur.StartPoint.Z;&#xA;&#xA;			x2 = cur.EndPoint.X + width;&#xA;			y2 = cur.EndPoint.Y;&#xA;			z2 = cur.EndPoint.Z;&#xA;		}&#xA;&#xA;		if(direction == &quot;x-&quot;)&#xA;		{&#xA;			x1 = cur.StartPoint.X - width;&#xA;			y1 = cur.StartPoint.Y;&#xA;			z1 = cur.StartPoint.Z;&#xA;&#xA;			x2 = cur.EndPoint.X - width;&#xA;			y2 = cur.EndPoint.Y;&#xA;			z2 = cur.EndPoint.Z;&#xA;		}&#xA;&#xA;		if(direction == &quot;y+&quot;)&#xA;		{&#xA;			x1 = cur.StartPoint.X;&#xA;			y1 = cur.StartPoint.Y + width;&#xA;			z1 = cur.StartPoint.Z;&#xA;&#xA;			x2 = cur.EndPoint.X;&#xA;			y2 = cur.EndPoint.Y + width;&#xA;			z2 = cur.EndPoint.Z;&#xA;		}&#xA;&#xA;		if(direction == &quot;y-&quot;)&#xA;		{&#xA;			x1 = cur.StartPoint.X;&#xA;			y1 = cur.StartPoint.Y - width;&#xA;			z1 = cur.StartPoint.Z;&#xA;&#xA;			x2 = cur.EndPoint.X;&#xA;			y2 = cur.EndPoint.Y - width;&#xA;			z2 = cur.EndPoint.Z;&#xA;		}&#xA;	}&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;	p2 = Point.ByCoordinates(x2, y2, z2);&#xA;&#xA;	curve = PolyCurve.ByPoints({p1, p2}, false);&#xA;&#xA;	return = curve;&#xA;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="2b11fee3-ada1-486a-b10f-7285bc5c4799" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-5119.3660744138" y="3236.35618975229" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//获取创建枋类构件的中心点&#xA;//p_center-&gt;与坊正交的栱的长方体部分的质心&#xA;//p_down-&gt;栌枓的内角点&#xA;//dh-&gt;与坊正交的栱的高的一半&#xA;def getNDGFangCenterPoint(p_center, p_down, dh)&#xA;{&#xA;	x1 = 0;&#xA;	y1 = 0;&#xA;	z1 = p_down.Z + (p_center.Z + dh - p_down.Z) / 2;&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;&#xA;	return = p1;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="0a7c427b-41be-4928-98fd-10e91ce54375" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-4503.76929264767" y="3251.94091840459" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//获取创建枋类构件的中心点&#xA;//p_center-&gt;与坊正交的栱的长方体部分的质心&#xA;//p_down-&gt;栌枓的内角点&#xA;//dh-&gt;与坊正交的栱的高的一半&#xA;def getHGFang(p, db, w, l, h)&#xA;{&#xA;	x1 = p.X + db - l / 2;&#xA;	y1 = p.Y - w / 2;&#xA;	z1 = p.Z + h / 2;&#xA;&#xA;	p1 = Point.ByCoordinates(x1, y1, z1);&#xA;&#xA;	cube = Cuboid.ByLengths(p1, l, w, h);&#xA;&#xA;	return = cube;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="efac0dde-5c4f-4a21-b45f-dbb2bfc5e7e5" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-3989.47324712154" y="3259.73328273075" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="def getMidPoint(p1, p2, h1, dh, h)&#xA;{&#xA;	x1 = (p1.X + p2.X) / 2;&#xA;	y1 = (p1.Y + p2.Y) / 2;&#xA;	z1 = p1.Z + h1 + dh + h / 2;&#xA;&#xA;	p_mid = Point.ByCoordinates(x1, y1, z1);&#xA;&#xA;	return = p_mid;&#xA;};" ShouldFocus="false" />
    <CoreNodeModels.Input.DoubleSlider guid="d2085207-53fb-48f9-9878-ce2ac849527f" type="CoreNodeModels.Input.DoubleSlider" nickname="b_12" x="-2005.84288770523" y="-4017.65822259492" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>632</System.Double>
      <Range min="580" max="680" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="678de147-592d-4364-a019-343093be90d2" type="CoreNodeModels.Input.DoubleSlider" nickname="r_16" x="-2006.2400087201" y="-4377.6318577813" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>70</System.Double>
      <Range min="50" max="100" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="79b9eac5-6126-4de9-9d79-fd1df2bf256a" type="CoreNodeModels.Input.DoubleSlider" nickname="b_15" x="-2006.51082985201" y="-4572.24778272533" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>722</System.Double>
      <Range min="680" max="780" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="45eb9376-dd25-47ef-910f-2e9dd4f7d17e" type="CoreNodeModels.Input.DoubleSlider" nickname="l_14" x="-2005.28848419358" y="-4641.7326053082" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>466</System.Double>
      <Range min="400" max="530" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="aa79ecb8-58cd-4948-b5c1-ca054dba4eac" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_15" x="-2005.28848419358" y="-4738.29791232426" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>90</System.Double>
      <Range min="70" max="120" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="7b2770c1-7471-4df9-90ce-4e052a223ec7" type="CoreNodeModels.Input.DoubleSlider" nickname="h_13" x="-2008.95552116888" y="-4924.09445240581" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>60</System.Double>
      <Range min="50" max="80" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="f4950276-5946-42b8-9a8f-65bcb442f7ed" type="CoreNodeModels.Input.DoubleSlider" nickname="l_13" x="-2006.51082985201" y="-4828.75149104817" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>568</System.Double>
      <Range min="500" max="620" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="7c7368c6-c311-4aaf-a4d2-6334f195585f" type="CoreNodeModels.Input.DoubleSlider" nickname="b_01" x="-1939.31405058302" y="-2181.61665326465" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>120</System.Double>
      <Range min="100" max="150" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="0110c7ed-43be-4a1c-9605-4c99655ecc29" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_01" x="-1941.05976784874" y="-2275.3125127055" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>100</System.Double>
      <Range min="80" max="130" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="1aef89b8-5bc1-4ab2-a231-d8ed9a17c1ab" type="CoreNodeModels.Input.DoubleSlider" nickname="h1_01" x="-1939.18090066594" y="-2102.30977544591" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>30</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="42ff6256-589d-4f9c-9289-c315ab77e63d" type="CoreNodeModels.Input.DoubleSlider" nickname="h2_01" x="-1936.58880265055" y="-2025.84065040142" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>36</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="25cd4e99-94de-459b-954a-9a25560105f6" type="CoreNodeModels.Input.DoubleSlider" nickname="b2_01" x="-1935.01824202994" y="-1946.76063199277" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>40</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="83654766-3bca-4b6b-a4a4-ab79a6d766f6" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="CenterPoint" x="-1941.46188860574" y="-2386.12383816984" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="Point.ByCoordinates(0, 0, 0);" ShouldFocus="false" />
    <CoreNodeModels.Input.DoubleSlider guid="3dfe2b18-a428-496b-872c-4a8e12d62e00" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_04" x="-1949.18637518512" y="-2479.80382700963" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>45</System.Double>
      <Range min="30" max="70" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="32400e44-d45e-4738-af66-93cd0e2c1045" type="CoreNodeModels.Input.DoubleSlider" nickname="h1_04" x="-1949.62783166438" y="-2576.53871546431" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>17</System.Double>
      <Range min="5" max="30" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="f7ccc2df-1e40-4438-9e5c-281a04cf7f74" type="CoreNodeModels.Input.DoubleSlider" nickname="b_04" x="-1949.84167484161" y="-2666.98750320379" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>70</System.Double>
      <Range min="50" max="100" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="3785db76-36b0-482c-b0b0-65229395b783" type="CoreNodeModels.Input.DoubleSlider" nickname="b2_04" x="-1953.63046689688" y="-2759.24595194111" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>40</System.Double>
      <Range min="20" max="60" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="35411072-d811-4314-82b7-670e29a03c5d" type="CoreNodeModels.Input.DoubleSlider" nickname="h_04" x="-1956.31702829722" y="-2845.72184343356" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>45</System.Double>
      <Range min="30" max="50" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="0ee57d16-d1be-44a2-b6c2-e6232b4469bc" type="CoreNodeModels.Input.DoubleSlider" nickname="h2_04" x="-1960.68042674883" y="-2931.87665097272" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>18</System.Double>
      <Range min="5" max="30" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="d5501f1e-f14a-441e-9b15-88a720ec7ecd" type="CoreNodeModels.Input.DoubleSlider" nickname="h2_05" x="-1963.33495191994" y="-3017.79783265385" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>0</System.Double>
      <Range min="0" max="10" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="a247819c-52bb-426b-b65b-ee705c978791" type="CoreNodeModels.Input.DoubleSlider" nickname="b_06" x="-1969.63706318292" y="-3107.7417439208" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>466</System.Double>
      <Range min="400" max="500" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="c2510042-c434-410c-86a6-f385cb925f98" type="CoreNodeModels.Input.DoubleSlider" nickname="h1_06" x="-1970.45414727428" y="-3211.73078963737" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>32</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="f30bcd95-591d-4014-926b-09f51d72e956" type="CoreNodeModels.Input.DoubleSlider" nickname="h_06" x="-1968.75369578272" y="-3308.47650597224" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>60</System.Double>
      <Range min="50" max="80" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="d27bf3df-e0f0-47aa-bf7e-40542416c99d" type="CoreNodeModels.Input.DoubleSlider" nickname="b2_08" x="-1960.1972761737" y="-3402.59712167145" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>90</System.Double>
      <Range min="70" max="100" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="db0836da-dc9f-42ac-899d-bd20ea16f789" type="CoreNodeModels.Input.DoubleSlider" nickname="b_02" x="-1961.91462266567" y="-3491.71218274125" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>280</System.Double>
      <Range min="250" max="350" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="973651d4-a263-425b-b9c3-69d478e92a4b" type="CoreNodeModels.Input.DoubleSlider" nickname="b_07" x="-1974.86542407487" y="-3584.72662477771" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>220</System.Double>
      <Range min="180" max="300" step="5" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="6ee453e0-acf3-4638-8ed7-bbd4898be5f9" type="CoreNodeModels.Input.DoubleSlider" nickname="b_10" x="-1981.47215320057" y="-3699.51094467456" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>413</System.Double>
      <Range min="350" max="450" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="fde7e01b-a6ac-4f70-a90c-553803fa8edb" type="CoreNodeModels.Input.DoubleSlider" nickname="h1_10" x="-1986.71093163502" y="-3794.34719924397" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>32</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="37d652a2-5e3c-407b-9dee-b5537aee585d" type="CoreNodeModels.Input.DoubleSlider" nickname="b2_12" x="-1990.90097370307" y="-3906.7621744059" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>90</System.Double>
      <Range min="70" max="100" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="a937013d-d544-4e49-8806-32b3bbfa0205" type="CoreNodeModels.Input.DoubleSlider" nickname="h_09" x="-1999.46457623029" y="-4116.6085283378" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>60</System.Double>
      <Range min="50" max="80" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="7fe5c62e-2944-4851-bb43-476cc71354a1" type="CoreNodeModels.Input.DoubleSlider" nickname="b_09" x="-2001.68803281461" y="-4208.06321798759" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>568</System.Double>
      <Range min="500" max="620" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="bc347a09-6be6-4b0f-a395-80a244d31d6e" type="CoreNodeModels.Input.DoubleSlider" nickname="b_11" x="-2002.79420647736" y="-4303.29000734955" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>256</System.Double>
      <Range min="200" max="300" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="d06fe0f2-6d6a-4519-bed4-365f372ea5f8" type="CoreNodeModels.Input.DoubleSlider" nickname="h_16" x="-2003.57408267069" y="-4475.19827572325" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>377</System.Double>
      <Range min="300" max="420" step="1" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="bcc85b4a-1a40-4656-acb7-e020c6bcfa51" type="CoreNodeModels.Input.DoubleSlider" nickname="h_01" x="-1931.56881422653" y="-1874.57893276697" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>80</System.Double>
      <Range min="60" max="100" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleInput guid="b9dd35e4-fc01-486c-9e75-0514d1513bb9" type="CoreNodeModels.Input.DoubleInput" nickname="m" x="-1822.1668024283" y="-1799.97529975672" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double value="4" />
    </CoreNodeModels.Input.DoubleInput>
    <CoreNodeModels.Input.DoubleSlider guid="b16d67c8-641f-4993-8e4e-cc7bb78a0ee0" type="CoreNodeModels.Input.DoubleSlider" nickname="h1_02" x="-1930.06185271401" y="-1723.4046189088" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>32</System.Double>
      <Range min="20" max="50" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="3c05d49d-0168-4da2-9d41-9bebaa46ed48" type="CoreNodeModels.Input.DoubleSlider" nickname="h_02" x="-1929.04578983841" y="-1639.15426172294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>60</System.Double>
      <Range min="50" max="80" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="21945698-52b6-494b-aa94-4290e1f6c8b1" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-3182.02356610669" y="3191.21380723588" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//create first tiao&#xA;//&#xA;&#xA;&#xA;def createFirst(centerPoint, b1_01, h1_01, b_01, b2_01, h_01, h2_01, m,&#xA;b_02, b1_02, h1_02, h_02)&#xA;{&#xA;	result = {};&#xA;	/*****create quad****/&#xA;	//centerpoint&#xA;	p = centerPoint;&#xA;	//radius&#xA;	r = b1_01 / 2;&#xA;	//create Trape -- d&#xA;	T_d = (b_01 - b1_01) / 2;&#xA;	//create U Plane -- h1&#xA;	U_h1 = h_01 - h1_01;&#xA;	//create JuanSha -- u&#xA;	JS_u = h2_01 / U_h1;&#xA;	//create JuanSha -- v&#xA;	JS_v = b2_01 / b_01;&#xA;	//create JuanSha -- 1 - v&#xA;	JS_mv = 1 - (b2_01 / b_01);&#xA;	//create JuanSha -- b2&#xA;	JS_b2 = ((b_02 - 2 * b1_02) - b_01) / 2;&#xA;	//bottom quad&#xA;	bottomQuad = createQuadCenter(centerPoint, r);&#xA;&#xA;	bottomQuadSurface = Surface.ByPatch(bottomQuad);&#xA;	//0&#xA;	result = List.AddItemToEnd(bottomQuadSurface, result);&#xA;	/****create trape*****/&#xA;	//trape1&#xA;	p_T1 = Surface.PointAtParameter(bottomQuadSurface, 0.5, 0);&#xA;&#xA;	direc1 = &quot;y-&quot;;&#xA;	Trape1 = createTrape(p_T1, b1_01, b_01, h1_01, T_d, direc1);&#xA;&#xA;	Trape1_S = Surface.ByPatch(Trape1);&#xA;	//1&#xA;	result = List.AddItemToEnd(Trape1_S, result);&#xA;&#xA;	//trape2&#xA;	p_T2 = Surface.PointAtParameter(bottomQuadSurface, 0.5, 1);&#xA;&#xA;	direc2 = &quot;y+&quot;;&#xA;	Trape2 = createTrape(p_T2, b1_01, b_01, h1_01, T_d, direc2);&#xA;&#xA;	Trape2_S = Surface.ByPatch(Trape2);&#xA;	//2&#xA;	result = List.AddItemToEnd(Trape2_S, result);&#xA;&#xA;	//trape3&#xA;	p_T3 = Surface.PointAtParameter(bottomQuadSurface, 1, 0.5);&#xA;&#xA;	direc3 = &quot;x+&quot;;&#xA;	Trape3 = createTrape(p_T3, b1_01, b_01, h1_01, T_d, direc3);&#xA;&#xA;	Trape3_S = Surface.ByPatch(Trape3);&#xA;	//3&#xA;	result = List.AddItemToEnd(Trape3_S, result);&#xA;&#xA;	//trape4&#xA;	p_T4 = Surface.PointAtParameter(bottomQuadSurface, 0, 0.5);&#xA;&#xA;	direc4 = &quot;x-&quot;;&#xA;	Trape4 = createTrape(p_T4, b1_01, b_01, h1_01, T_d, direc4);&#xA;&#xA;	Trape4_S = Surface.ByPatch(Trape4);&#xA;	//4&#xA;	result = List.AddItemToEnd(Trape4_S, result);&#xA;&#xA;	/*****create U plane*****/&#xA;	//UPlane1&#xA;	p_U1 = Surface.PointAtParameter(Trape1_S, 0, 0.5);&#xA;&#xA;	direc12 = &quot;x&quot;;&#xA;	UPlane1 = createUPlane(p_U1, b_01, b2_01, U_h1, h2_01, direc12);&#xA;&#xA;	UPlane1_S = Surface.ByPatch(UPlane1);&#xA;	//5&#xA;	result = List.AddItemToEnd(UPlane1_S, result);&#xA;&#xA;	//UPlane2&#xA;	p_U2 = Surface.PointAtParameter(Trape2_S, 0, 0.5);&#xA;&#xA;&#xA;	UPlane2 = createUPlane(p_U2, b_01, b2_01, U_h1, h2_01, direc12);&#xA;&#xA;	UPlane2_S = Surface.ByPatch(UPlane2);&#xA;	//6&#xA;	result = List.AddItemToEnd(UPlane2_S, result);&#xA;&#xA;	//UPlane3&#xA;	p_U3 = Surface.PointAtParameter(Trape3_S, 0, 0.5);&#xA;&#xA;	direc34 = &quot;y&quot;;&#xA;	UPlane3 = createUPlane(p_U3, b_01, b2_01, U_h1, h2_01, direc34);&#xA;&#xA;	UPlane3_S = Surface.ByPatch(UPlane3);&#xA;	//7&#xA;	result = List.AddItemToEnd(UPlane3_S, result);&#xA;&#xA;	//UPlane4&#xA;	p_U4 = Surface.PointAtParameter(Trape4_S, 0, 0.5);&#xA;&#xA;&#xA;	UPlane4 = createUPlane(p_U4, b_01, b2_01, U_h1, h2_01, direc34);&#xA;&#xA;	UPlane4_S = Surface.ByPatch(UPlane4);&#xA;	//8&#xA;	result = List.AddItemToEnd(UPlane4_S, result);&#xA;&#xA;	/*****create JuanSha*****/&#xA;	//JS1&#xA;	direc1 = &quot;y-&quot;;&#xA;	//JS1_1&#xA;	p_JS1_1 = Surface.PointAtParameter(UPlane1_S, JS_u, JS_v);&#xA;&#xA;	JS1_1 = createJuanshaCurve(p_JS1_1, b1_02, JS_b2, m, h1_02, h_02, direc1);&#xA;&#xA;	JS1_C1 = Surface.ByPatch(JS1_1);&#xA;	//9&#xA;	result = List.AddItemToEnd(JS1_C1, result);&#xA;&#xA;	//JS1_2&#xA;	p_JS1_2 = Surface.PointAtParameter(UPlane1_S, JS_u, JS_mv);&#xA;&#xA;	JS1_2 = createJuanshaCurve(p_JS1_2, b1_02, JS_b2, m, h1_02, h_02, direc1);&#xA;&#xA;	JS1_C2 = Surface.ByPatch(JS1_2);&#xA;	//10&#xA;	result = List.AddItemToEnd(JS1_C2, result);&#xA;&#xA;	JS1 = {};&#xA;&#xA;	JS1 = List.AddItemToEnd(JS1_1, JS1);&#xA;	JS1 = List.AddItemToEnd(JS1_2, JS1);&#xA;	JS1_S = Surface.ByLoft(JS1);&#xA;	//11&#xA;	result = List.AddItemToEnd(JS1_S, result);&#xA;&#xA;	//JS2&#xA;	direc2 = &quot;y+&quot;;&#xA;	//JS2_1&#xA;	p_JS2_1 = Surface.PointAtParameter(UPlane2_S, JS_u, JS_v);&#xA;&#xA;	JS2_1 = createJuanshaCurve(p_JS2_1, b1_02, JS_b2, m, h1_02, h_02, direc2);&#xA;&#xA;	JS2_C1 = Surface.ByPatch(JS2_1);&#xA;	//12&#xA;	result = List.AddItemToEnd(JS2_C1, result);&#xA;&#xA;	//JS2_2&#xA;	p_JS2_2 = Surface.PointAtParameter(UPlane2_S, JS_u, JS_mv);&#xA;&#xA;	JS2_2 = createJuanshaCurve(p_JS2_2, b1_02, JS_b2, m, h1_02, h_02, direc2);&#xA;&#xA;	JS2_C2 = Surface.ByPatch(JS2_2);&#xA;	//13&#xA;	result = List.AddItemToEnd(JS2_C2, result);&#xA;&#xA;	JS2 = {};&#xA;&#xA;	JS2 = List.AddItemToEnd(JS2_1, JS2);&#xA;	JS2 = List.AddItemToEnd(JS2_2, JS2);&#xA;	JS2_S = Surface.ByLoft(JS2);&#xA;	//14&#xA;	result = List.AddItemToEnd(JS2_S, result);&#xA;&#xA;	//JS3&#xA;	direc3 = &quot;x+&quot;;&#xA;	//JS3_1&#xA;	p_JS3_1 = Surface.PointAtParameter(UPlane3_S, JS_u, JS_v);&#xA;&#xA;	JS3_1 = createJuanshaCurve(p_JS3_1, b1_02, JS_b2, m, h1_02, h_02, direc3);&#xA;&#xA;	JS3_C1 = Surface.ByPatch(JS3_1);&#xA;	//15&#xA;	result = List.AddItemToEnd(JS3_C1, result);&#xA;&#xA;	//JS3_2&#xA;	p_JS3_2 = Surface.PointAtParameter(UPlane3_S, JS_u, JS_mv);&#xA;&#xA;	JS3_2 = createJuanshaCurve(p_JS3_2, b1_02, JS_b2, m, h1_02, h_02, direc3);&#xA;&#xA;	JS3_C2 = Surface.ByPatch(JS3_2);&#xA;	//16&#xA;	result = List.AddItemToEnd(JS3_C2, result);&#xA;&#xA;	JS3 = {};&#xA;&#xA;	JS3 = List.AddItemToEnd(JS3_1, JS3);&#xA;	JS3 = List.AddItemToEnd(JS3_2, JS3);&#xA;	JS3_S = Surface.ByLoft(JS3);&#xA;	//17&#xA;	result = List.AddItemToEnd(JS3_S, result);&#xA;&#xA;	//JS4&#xA;	direc4 = &quot;x-&quot;;&#xA;	//JS4_1&#xA;	p_JS4_1 = Surface.PointAtParameter(UPlane4_S, JS_u, JS_v);&#xA;&#xA;	JS4_1 = createJuanshaCurve(p_JS4_1, b1_02, JS_b2, m, h1_02, h_02, direc4);&#xA;&#xA;	JS4_C1 = Surface.ByPatch(JS4_1);&#xA;	//18&#xA;	result = List.AddItemToEnd(JS4_C1, result);&#xA;&#xA;	//JS4_2&#xA;	p_JS4_2 = Surface.PointAtParameter(UPlane4_S, JS_u, JS_mv);&#xA;&#xA;	JS4_2 = createJuanshaCurve(p_JS4_2, b1_02, JS_b2, m, h1_02, h_02, direc4);&#xA;&#xA;	JS4_C2 = Surface.ByPatch(JS4_2);&#xA;	//19&#xA;	result = List.AddItemToEnd(JS4_C2, result);&#xA;&#xA;	JS4 = {};&#xA;&#xA;	JS4 = List.AddItemToEnd(JS4_1, JS4);&#xA;	JS4 = List.AddItemToEnd(JS4_2, JS4);&#xA;	JS4_S = Surface.ByLoft(JS4);&#xA;	//20&#xA;	result = List.AddItemToEnd(JS4_S, result);&#xA;&#xA;	return = result;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="b49a469f-4a27-4fec-b261-cd823ba16b36" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-1072.11416262972" y="-3488.76444783138" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="true" CodeText="first = createFirst(centerPoint, b1_01, h1_01, b_01, b2_01, h_01, h2_01, m,&#xA;b_02, b1_02, h1_02, h_02);&#xA;&#xA;second = createSecond(first[9], first[12], first[15], b_07, b2_01, b1_04, b_02, b2_04,&#xA;h_04, h2_04, h2_05, h1_04, b_04, b_06, b1_06, h1_06, h_06, m, b2_08, b_08);&#xA;&#xA;third = createThird(second[29], second[32], second[35], second[38], second[41],&#xA;b2_01, b1_04, b2_04, h_04, h2_04, h2_05, h1_04, b_04, b_07, m, t_08, b_10, b1_10,&#xA;h1_10, h_10, b_11, b2_12, b_12, h_12, h_09, t_09, b_09);&#xA;&#xA;createFourth(third[0], third[1], third[47], third[50], third[53],&#xA;third[56], third[59], b2_01, b1_04, h_09, b2_04, h_04, h2_04, h2_05,&#xA;h1_04, b_04, h_13, w_13, l_13, w_14, l_14, b1_15, t_15, b_15, h_15,&#xA;centerPoint, h_01, h_16, r_16);" ShouldFocus="false" />
    <CoreNodeModels.Input.DoubleSlider guid="0dc65791-bde4-4893-ace8-893546fb042a" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_02" x="-1928.78174943944" y="-1516.50637529404" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>60</System.Double>
      <Range min="50" max="80" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="09867794-6407-4d0e-a055-1aa860df6dce" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-2397.86986077635" y="3230.37161394142" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//create second tiao&#xA;&#xA;def createSecond(JS1_C1, JS2_C1, JS3_C1, b_07, b2_01, b1_04, b_02, b2_04,&#xA;h_04, h2_04, h2_05, h1_04, b_04, b_06, b1_06, h1_06, h_06, m, b2_08, b_08)&#xA;{&#xA;	result = {};&#xA;&#xA;	//create quad translate dx&#xA;	Q_d_x = b2_01 / 2;&#xA;	//create quad translate dy&#xA;	Q_d_y = b2_04 / 2;&#xA;	//create quad -- r&#xA;	Q_r = b1_04 / 2;&#xA;	//create Trape -- d&#xA;	T_d = (b_04 - b1_04) / 2;&#xA;	//create U palne -- h1&#xA;	U_h1 = (h_04 - h1_04);&#xA;	//create JS -- u&#xA;	JS_u = h2_04 / U_h1;&#xA;	//create JS -- v&#xA;	JS_v = (((b_04 - b2_04) / 2) + b2_04) / b_04;&#xA;	//create JS -- mv&#xA;	JS_mv = 1 - ((((b_04 - b2_04) / 2) + b2_04) / b_04);&#xA;	//create JS -- b2_12&#xA;	JS_b2_12 = ((b_06 - 2 * b1_06) - b_02 - 2 * T_d) / 2;&#xA;	//create JS -- b2_34&#xA;	JS_b2_34 = ((b_07 - 2 * b1_06) - b2_01 - 2 * T_d) / 2;&#xA;	//create JS -- b2_5&#xA;	JS_b2_5 = b2_08 - b1_06 - (b_04 - (((b_04 - b2_04) / 2) + b2_04));&#xA;	//create Cuboid -- width&#xA;	Cub_w = b_08 - b1_06 - JS_b2_5;&#xA;	/*****************JS1***************/&#xA;	/********create quad*******/&#xA;	p_Q1 = Surface.PointAtParameter(JS1_C1, 1.0, 0.0);&#xA;&#xA;	p_Q1_trans = Geometry.Translate(p_Q1, Q_d_x, Q_d_y, 0.0);&#xA;&#xA;	Quad1 = createQuadCenter(p_Q1_trans, Q_r);&#xA;&#xA;	Quad_1S = Surface.ByPatch(Quad1);&#xA;&#xA;	result = List.AddItemToEnd(Quad_1S, result);&#xA;&#xA;	/***********JS2***********/&#xA;	/********create quad*******/&#xA;	p_Q2 = Surface.PointAtParameter(JS2_C1, 0.0, 1.0);&#xA;&#xA;	p_Q2_trans = Geometry.Translate(p_Q2, Q_d_x, -Q_d_y, 0.0);&#xA;&#xA;	Quad2 = createQuadCenter(p_Q2_trans, Q_r);&#xA;&#xA;	Quad_2S = Surface.ByPatch(Quad2);&#xA;&#xA;	result = List.AddItemToEnd(Quad_2S, result);&#xA;&#xA;	/***********JS3***********/&#xA;	/********create quad*******/&#xA;	p_Q3 = Surface.PointAtParameter(JS3_C1, 0.0, 1.0);&#xA;&#xA;	p_Q3_trans = Geometry.Translate(p_Q3, -Q_d_x, Q_d_y, 0.0);&#xA;&#xA;	Quad3 = createQuadCenter(p_Q3_trans, Q_r);&#xA;&#xA;	Quad_3S = Surface.ByPatch(Quad3);&#xA;&#xA;	result = List.AddItemToEnd(Quad_3S, result);&#xA;&#xA;	/*************************JS1************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_1_p_T1 = Surface.PointAtParameter(Quad_1S, 0.5, 0.0);&#xA;&#xA;	_1_direc1 = &quot;y-&quot;;&#xA;	_1_T1 = createTrape(_1_p_T1, b1_04, b_04, h1_04, T_d, _1_direc1);&#xA;&#xA;	_1_T1_S = Surface.ByPatch(_1_T1);&#xA;&#xA;	result = List.AddItemToEnd(_1_T1_S, result);&#xA;&#xA;	//T2&#xA;	_1_p_T2 = Surface.PointAtParameter(Quad_1S, 0.5, 1.0);&#xA;&#xA;	_1_direc2 = &quot;y+&quot;;&#xA;	_1_T2 = createTrape(_1_p_T2, b1_04, b_04, h1_04, T_d, _1_direc2);&#xA;&#xA;	_1_T2_S = Surface.ByPatch(_1_T2);&#xA;&#xA;	result = List.AddItemToEnd(_1_T2_S, result);&#xA;&#xA;	//T3&#xA;	_1_p_T3 = Surface.PointAtParameter(Quad_1S, 1.0, 0.5);&#xA;&#xA;	_1_direc3 = &quot;x+&quot;;&#xA;	_1_T3 = createTrape(_1_p_T3, b1_04, b_04, h1_04, T_d, _1_direc3);&#xA;&#xA;	_1_T3_S = Surface.ByPatch(_1_T3);&#xA;&#xA;	result = List.AddItemToEnd(_1_T3_S, result);&#xA;&#xA;	//T4&#xA;	_1_p_T4 = Surface.PointAtParameter(Quad_1S, 0.0, 0.5);&#xA;&#xA;	_1_direc4 = &quot;x-&quot;;&#xA;	_1_T4 = createTrape(_1_p_T4, b1_04, b_04, h1_04, T_d, _1_direc4);&#xA;&#xA;	_1_T4_S = Surface.ByPatch(_1_T4);&#xA;&#xA;	result = List.AddItemToEnd(_1_T4_S, result);&#xA;&#xA;	/*************************JS2************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_2_p_T1 = Surface.PointAtParameter(Quad_2S, 0.5, 0.0);&#xA;&#xA;	_2_direc1 = &quot;y-&quot;;&#xA;	_2_T1 = createTrape(_2_p_T1, b1_04, b_04, h1_04, T_d, _2_direc1);&#xA;&#xA;	_2_T1_S = Surface.ByPatch(_2_T1);&#xA;&#xA;	result = List.AddItemToEnd(_2_T1_S, result);&#xA;&#xA;	//T2&#xA;	_2_p_T2 = Surface.PointAtParameter(Quad_2S, 0.5, 1.0);&#xA;&#xA;	_2_direc2 = &quot;y+&quot;;&#xA;	_2_T2 = createTrape(_2_p_T2, b1_04, b_04, h1_04, T_d, _2_direc2);&#xA;&#xA;	_2_T2_S = Surface.ByPatch(_2_T2);&#xA;&#xA;	result = List.AddItemToEnd(_2_T2_S, result);&#xA;&#xA;	//T3&#xA;	_2_p_T3 = Surface.PointAtParameter(Quad_2S, 1.0, 0.5);&#xA;&#xA;	_2_direc3 = &quot;x+&quot;;&#xA;	_2_T3 = createTrape(_2_p_T3, b1_04, b_04, h1_04, T_d, _2_direc3);&#xA;&#xA;	_2_T3_S = Surface.ByPatch(_2_T3);&#xA;&#xA;	result = List.AddItemToEnd(_2_T3_S, result);&#xA;&#xA;	//T4&#xA;	_2_p_T4 = Surface.PointAtParameter(Quad_2S, 0.0, 0.5);&#xA;&#xA;	_2_direc4 = &quot;x-&quot;;&#xA;	_2_T4 = createTrape(_2_p_T4, b1_04, b_04, h1_04, T_d, _2_direc4);&#xA;&#xA;	_2_T4_S = Surface.ByPatch(_2_T4);&#xA;&#xA;	result = List.AddItemToEnd(_2_T4_S, result);&#xA;&#xA;	/*************************JS3************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_p_T1 = Surface.PointAtParameter(Quad_3S, 0.5, 0.0);&#xA;&#xA;	_3_direc1 = &quot;y-&quot;;&#xA;	_3_T1 = createTrape(_3_p_T1, b1_04, b_04, h1_04, T_d, _3_direc1);&#xA;&#xA;	_3_T1_S = Surface.ByPatch(_3_T1);&#xA;&#xA;	result = List.AddItemToEnd(_3_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_p_T2 = Surface.PointAtParameter(Quad_3S, 0.5, 1.0);&#xA;&#xA;	_3_direc2 = &quot;y+&quot;;&#xA;	_3_T2 = createTrape(_3_p_T2, b1_04, b_04, h1_04, T_d, _3_direc2);&#xA;&#xA;	_3_T2_S = Surface.ByPatch(_3_T2);&#xA;&#xA;	result = List.AddItemToEnd(_3_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_p_T3 = Surface.PointAtParameter(Quad_3S, 1.0, 0.5);&#xA;&#xA;	_3_direc3 = &quot;x+&quot;;&#xA;	_3_T3 = createTrape(_3_p_T3, b1_04, b_04, h1_04, T_d, _3_direc3);&#xA;&#xA;	_3_T3_S = Surface.ByPatch(_3_T3);&#xA;&#xA;	result = List.AddItemToEnd(_3_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_p_T4 = Surface.PointAtParameter(Quad_3S, 0.0, 0.5);&#xA;&#xA;	_3_direc4 = &quot;x-&quot;;&#xA;	_3_T4 = createTrape(_3_p_T4, b1_04, b_04, h1_04, T_d, _3_direc4);&#xA;&#xA;	_3_T4_S = Surface.ByPatch(_3_T4);&#xA;&#xA;	result = List.AddItemToEnd(_3_T4_S, result);&#xA;&#xA;	/*************************JS1*****************************/&#xA;	/**************create U plane********************/&#xA;	_1_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_1_p_U1 = Surface.PointAtParameter(_1_T1_S, 0.5, 0.0);&#xA;&#xA;	_1_U1 = createUPlane(_1_p_U1, b_04, b2_04, U_h1, h2_04, _1_direc12);&#xA;&#xA;	_1_U1_S = Surface.ByPatch(_1_U1);&#xA;&#xA;	result = List.AddItemToEnd(_1_U1_S, result);&#xA;&#xA;	//U2&#xA;	_1_p_U2 = Surface.PointAtParameter(_1_T2_S, 0.5, 1.0);&#xA;&#xA;	_1_U2 = createUPlane(_1_p_U2, b_04, b2_04, U_h1, h2_04, _1_direc12);&#xA;&#xA;	_1_U2_S = Surface.ByPatch(_1_U2);&#xA;&#xA;	result = List.AddItemToEnd(_1_U2_S, result);&#xA;&#xA;	_1_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_1_p_U3 = Surface.PointAtParameter(_1_T3_S, 0.0, 0.5);&#xA;&#xA;	_1_U3 = createUPlane(_1_p_U3, b_04, b2_04, U_h1, h2_04, _1_direc34);&#xA;&#xA;	_1_U3_S = Surface.ByPatch(_1_U3);&#xA;&#xA;	result = List.AddItemToEnd(_1_U3_S, result);&#xA;&#xA;	//U4&#xA;	_1_p_U4 = Surface.PointAtParameter(_1_T4_S, 0.0, 0.5);&#xA;&#xA;	_1_U4 = createUPlane(_1_p_U4, b_04, b2_04, U_h1, h2_04, _1_direc34);&#xA;&#xA;	_1_U4_S = Surface.ByPatch(_1_U4);&#xA;&#xA;	result = List.AddItemToEnd(_1_U4_S, result);&#xA;&#xA;	/*************************JS2*****************************/&#xA;	/**************create U plane********************/&#xA;	_2_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_2_p_U1 = Surface.PointAtParameter(_2_T1_S, 0.5, 0.0);&#xA;&#xA;	_2_U1 = createUPlane(_2_p_U1, b_04, b2_04, U_h1, h2_04, _2_direc12);&#xA;&#xA;	_2_U1_S = Surface.ByPatch(_2_U1);&#xA;&#xA;	result = List.AddItemToEnd(_2_U1_S, result);&#xA;&#xA;	//U2&#xA;	_2_p_U2 = Surface.PointAtParameter(_2_T2_S, 0.5, 1.0);&#xA;&#xA;	_2_U2 = createUPlane(_2_p_U2, b_04, b2_04, U_h1, h2_04, _2_direc12);&#xA;&#xA;	_2_U2_S = Surface.ByPatch(_2_U2);&#xA;&#xA;	result = List.AddItemToEnd(_2_U2_S, result);&#xA;&#xA;	_2_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_2_p_U3 = Surface.PointAtParameter(_2_T3_S, 0.0, 0.5);&#xA;&#xA;	_2_U3 = createUPlane(_2_p_U3, b_04, b2_04, U_h1, h2_04, _2_direc34);&#xA;&#xA;	_2_U3_S = Surface.ByPatch(_2_U3);&#xA;&#xA;	result = List.AddItemToEnd(_2_U3_S, result);&#xA;&#xA;	//U4&#xA;	_2_p_U4 = Surface.PointAtParameter(_2_T4_S, 0.0, 0.5);&#xA;&#xA;	_2_U4 = createUPlane(_2_p_U4, b_04, b2_04, U_h1, h2_04, _2_direc34);&#xA;&#xA;	_2_U4_S = Surface.ByPatch(_2_U4);&#xA;&#xA;	result = List.AddItemToEnd(_2_U4_S, result);&#xA;&#xA;	/*************************J3*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_p_U1 = Surface.PointAtParameter(_3_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_U1 = createUPlane(_3_p_U1, b_04, b2_04, U_h1, h2_04, _3_direc12);&#xA;&#xA;	_3_U1_S = Surface.ByPatch(_3_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_p_U2 = Surface.PointAtParameter(_3_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_U2 = createUPlane(_3_p_U2, b_04, b2_04, U_h1, h2_04, _3_direc12);&#xA;&#xA;	_3_U2_S = Surface.ByPatch(_3_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_U2_S, result);&#xA;&#xA;	_3_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_p_U3 = Surface.PointAtParameter(_3_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_U3 = createUPlane(_3_p_U3, b_04, b2_04, U_h1, h2_04, _3_direc34);&#xA;&#xA;	_3_U3_S = Surface.ByPatch(_3_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_p_U4 = Surface.PointAtParameter(_3_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_U4 = createUPlane(_3_p_U4, b_04, b2_04, U_h1, h2_04, _3_direc34);&#xA;&#xA;	_3_U4_S = Surface.ByPatch(_3_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_U4_S, result);&#xA;&#xA;	/***************************_1_JS****************************/&#xA;	_1_direc = &quot;y-&quot;;&#xA;	//JS_C1&#xA;	_1_JS_C1_p = Surface.PointAtParameter(_1_U1_S, JS_u, JS_v);&#xA;&#xA;	_1_JS_C1 = createJuanshaCurve(_1_JS_C1_p, b1_06, JS_b2_12, m, h1_06,&#xA;	h_06, _1_direc);&#xA;&#xA;	_1_JS_C1_S = Surface.ByPatch(_1_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_1_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_1_JS_C2_p = Surface.PointAtParameter(_1_U1_S, JS_u, JS_mv);&#xA;&#xA;	_1_JS_C2 = createJuanshaCurve(_1_JS_C2_p, b1_06, JS_b2_12, m, h1_06,&#xA;	h_06, _1_direc);&#xA;&#xA;	_1_JS_C2_S = Surface.ByPatch(_1_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_1_JS_C2_S, result);&#xA;&#xA;	_1_JS = {};&#xA;	_1_JS = List.AddItemToEnd(_1_JS_C1, _1_JS);&#xA;	_1_JS = List.AddItemToEnd(_1_JS_C2, _1_JS);&#xA;	_1_JS_S = PolySurface.ByLoft(_1_JS);&#xA;&#xA;	result = List.AddItemToEnd(_1_JS_S, result);&#xA;&#xA;	/***************************_2_JS****************************/&#xA;	_2_direc = &quot;y+&quot;;&#xA;	//JS_C1&#xA;	_2_JS1_C1_p = Surface.PointAtParameter(_2_U2_S, JS_u, JS_v);&#xA;&#xA;	_2_JS_C1 = createJuanshaCurve(_2_JS1_C1_p, b1_06, JS_b2_12, m, h1_06,&#xA;	h_06, _2_direc);&#xA;&#xA;	_2_JS_C1_S = Surface.ByPatch(_2_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_2_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_2_JS1_C2_p = Surface.PointAtParameter(_2_U2_S, JS_u, JS_mv);&#xA;&#xA;	_2_JS_C2 = createJuanshaCurve(_2_JS1_C2_p, b1_06, JS_b2_12, m, h1_06,&#xA;	h_06, _2_direc);&#xA;&#xA;	_2_JS_C2_S = Surface.ByPatch(_2_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_2_JS_C2_S, result);&#xA;&#xA;	_2_JS = {};&#xA;	_2_JS = List.AddItemToEnd(_2_JS_C1, _2_JS);&#xA;	_2_JS = List.AddItemToEnd(_2_JS_C2, _2_JS);&#xA;	_2_JS_S = PolySurface.ByLoft(_2_JS);&#xA;&#xA;	result = List.AddItemToEnd(_2_JS_S, result);&#xA;&#xA;	/***************************_3_JS****************************/&#xA;	_3_direc = &quot;y-&quot;;&#xA;	//JS_C1&#xA;	_3_JS1_C1_p = Surface.PointAtParameter(_3_U1_S, JS_u, JS_v);&#xA;&#xA;	_3_JS_C1 = createJuanshaCurve(_3_JS1_C1_p, b1_06, JS_b2_34, m, h1_06,&#xA;	h_06, _3_direc);&#xA;&#xA;	_3_JS_C1_S = Surface.ByPatch(_3_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_JS1_C2_p = Surface.PointAtParameter(_3_U1_S, JS_u, JS_mv);&#xA;&#xA;	_3_JS_C2 = createJuanshaCurve(_3_JS1_C2_p, b1_06, JS_b2_34, m, h1_06,&#xA;	h_06, _3_direc);&#xA;&#xA;	_3_JS_C2_S = Surface.ByPatch(_3_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_JS_C2_S, result);&#xA;&#xA;	_3_JS = {};&#xA;	_3_JS = List.AddItemToEnd(_3_JS_C1, _3_JS);&#xA;	_3_JS = List.AddItemToEnd(_3_JS_C2, _3_JS);&#xA;	_3_JS_S = PolySurface.ByLoft(_3_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_JS_S, result);&#xA;&#xA;	/***************************_4_JS****************************/&#xA;	_4_direc = &quot;y+&quot;;&#xA;	//JS_C1&#xA;	_4_JS1_C1_p = Surface.PointAtParameter(_3_U2_S, JS_u, JS_v);&#xA;&#xA;	_4_JS_C1 = createJuanshaCurve(_4_JS1_C1_p, b1_06, JS_b2_34, m, h1_06,&#xA;	h_06, _4_direc);&#xA;&#xA;	_4_JS_C1_S = Surface.ByPatch(_4_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_4_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_4_JS1_C2_p = Surface.PointAtParameter(_3_U2_S, JS_u, JS_mv);&#xA;&#xA;	_4_JS_C2 = createJuanshaCurve(_4_JS1_C2_p, b1_06, JS_b2_34, m, h1_06,&#xA;	h_06, _4_direc);&#xA;&#xA;	_4_JS_C2_S = Surface.ByPatch(_4_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_4_JS_C2_S, result);&#xA;&#xA;	_4_JS = {};&#xA;	_4_JS = List.AddItemToEnd(_4_JS_C1, _4_JS);&#xA;	_4_JS = List.AddItemToEnd(_4_JS_C2, _4_JS);&#xA;	_4_JS_S = PolySurface.ByLoft(_4_JS);&#xA;&#xA;	result = List.AddItemToEnd(_4_JS_S, result);&#xA;&#xA;	/***************************_5_JS****************************/&#xA;	_5_direc = &quot;x+&quot;;&#xA;	//JS_C1&#xA;	_5_JS1_C1_p = Surface.PointAtParameter(_3_U3_S, JS_u, JS_v);&#xA;&#xA;	_5_JS_C1 = createJuanshaCurve(_5_JS1_C1_p, b1_06, JS_b2_5, m, h1_06,&#xA;	h_06, _5_direc);&#xA;&#xA;	_5_JS_C1_S = Surface.ByPatch(_5_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_5_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_5_JS1_C2_p = Surface.PointAtParameter(_3_U3_S, JS_u, JS_mv);&#xA;&#xA;	_5_JS_C2 = createJuanshaCurve(_5_JS1_C2_p, b1_06, JS_b2_5, m, h1_06,&#xA;	h_06, _5_direc);&#xA;&#xA;	_5_JS_C2_S = Surface.ByPatch(_5_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_5_JS_C2_S, result);&#xA;&#xA;	_5_JS = {};&#xA;	_5_JS = List.AddItemToEnd(_5_JS_C1, _5_JS);&#xA;	_5_JS = List.AddItemToEnd(_5_JS_C2, _5_JS);&#xA;	_5_JS_S = PolySurface.ByLoft(_5_JS);&#xA;&#xA;	result = List.AddItemToEnd(_5_JS_S, result);&#xA;&#xA;	/*************************create cuboid**************************/&#xA;	_1_JS_Ss = PolySurface.Surfaces(_1_JS_S);&#xA;	_1_JS_S7 = List.GetItemAtIndex(_1_JS_Ss, 7);&#xA;&#xA;	_1_JS_C7 = Surface.PerimeterCurves(_1_JS_S7);&#xA;&#xA;	_1_JS_PC7 = PolyCurve.ByJoinedCurves(_1_JS_C7);&#xA;&#xA;	_2_JS_Ss = PolySurface.Surfaces(_2_JS_S);&#xA;	_2_JS_S7 = List.GetItemAtIndex(_2_JS_Ss, 7);&#xA;&#xA;	_2_JS_C7 = Surface.PerimeterCurves(_2_JS_S7);&#xA;&#xA;	_2_JS_PC7 = PolyCurve.ByJoinedCurves(_2_JS_C7);&#xA;&#xA;	_1_Cub = {};&#xA;&#xA;	_1_Cub = List.AddItemToEnd(_1_JS_PC7, _1_Cub);&#xA;	_1_Cub = List.AddItemToEnd(_2_JS_PC7, _1_Cub);&#xA;	_1_Cub_S = PolySurface.ByLoft(_1_Cub);&#xA;&#xA;	result = List.AddItemToEnd(_1_Cub_S, result);&#xA;&#xA;&#xA;	/*********************create cuboid***************************/&#xA;	_5_JS_Ss = PolySurface.Surfaces(_5_JS_S);&#xA;	_5_JS_S7 = List.GetItemAtIndex(_5_JS_Ss, 7);&#xA;&#xA;	_5_JS_C7 = Surface.PerimeterCurves(_5_JS_S7);&#xA;&#xA;	_5_JS_C7_0 = List.GetItemAtIndex(_5_JS_C7, 0);&#xA;	_5_JS_C7_1 = List.GetItemAtIndex(_5_JS_C7, 1);&#xA;	_5_JS_C7_2 = List.GetItemAtIndex(_5_JS_C7, 2);&#xA;	_5_JS_C7_3 = List.GetItemAtIndex(_5_JS_C7, 3);&#xA;&#xA;	_5_JS_PC_f_1 = PolyCurve.ByJoinedCurves(_5_JS_C7);&#xA;&#xA;	direc = &quot;x-&quot;;&#xA;&#xA;	_5_JS_PC0 = createCubiod(_5_JS_C7_0, Cub_w, direc);&#xA;	_5_JS_PC1 = createCubiod(_5_JS_C7_1, Cub_w, direc);&#xA;	_5_JS_PC2 = createCubiod(_5_JS_C7_2, Cub_w, direc);&#xA;	_5_JS_PC3 = createCubiod(_5_JS_C7_3, Cub_w, direc);&#xA;&#xA;	_5_JS_0_4 = {};&#xA;&#xA;	_5_JS_0_4 = List.AddItemToEnd(_5_JS_PC0, _5_JS_0_4);&#xA;	_5_JS_0_4 = List.AddItemToEnd(_5_JS_PC1, _5_JS_0_4);&#xA;	_5_JS_0_4 = List.AddItemToEnd(_5_JS_PC2, _5_JS_0_4);&#xA;	_5_JS_0_4 = List.AddItemToEnd(_5_JS_PC3, _5_JS_0_4);&#xA;&#xA;	_5_JS_PC_f_2 = PolyCurve.ByJoinedCurves(_5_JS_0_4);&#xA;&#xA;	_5_JS_Cub = {};&#xA;&#xA;	_5_JS_Cub = List.AddItemToEnd(_5_JS_PC_f_1, _5_JS_Cub);&#xA;	_5_JS_Cub = List.AddItemToEnd(_5_JS_PC_f_2, _5_JS_Cub);&#xA;&#xA;	_5_JS_Cub_S = Solid.ByLoft(_5_JS_Cub);&#xA;&#xA;	result = List.AddItemToEnd(_5_JS_Cub_S, result);&#xA;&#xA;&#xA;&#xA;	return = result;&#xA;};" ShouldFocus="false" />
    <CoreNodeModels.Input.DoubleSlider guid="20003c2a-88bb-48e4-beb1-f9cac029c51c" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_06" x="-1919.3323299802" y="-1426.03343583059" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>46</System.Double>
      <Range min="30" max="70" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <CoreNodeModels.Input.DoubleSlider guid="3ec19aae-711b-48f7-8f48-4b12b1cda135" type="CoreNodeModels.Input.DoubleSlider" nickname="b1_02" x="-1946.48044371631" y="-1310.96702331959" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Double>396</System.Double>
      <Range min="360" max="440" step="2" />
    </CoreNodeModels.Input.DoubleSlider>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="5531b4a7-5517-4c1d-9418-3cd608a448e1" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-1514.17554172189" y="3225.4359966758" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//create third&#xA;&#xA;def createThird(_2_1_JS_S, _2_2_JS_S, _2_3_JS_S, _2_4_JS_S, _2_5_JS_S,&#xA;b2_01, b1_04, b2_04, h_04, h2_04, h2_05, h1_04, b_04, b_07, m, t_08, b_10, b1_10,&#xA;h1_10, h_10, b_11, b2_12, b_12, h_12, h_09, t_09, b_09)&#xA;{&#xA;	result = {};&#xA;&#xA;	//create quad translate dx&#xA;	Q_d_x = b2_01 / 2;&#xA;	//create quad translate dy&#xA;	Q_d_y = b2_04 / 2;&#xA;	//create quad -- r&#xA;	Q_r = b1_04 / 2;&#xA;	//create Trape -- d&#xA;	T_d = (b_04 - b1_04) / 2;&#xA;	//create U palne -- h1&#xA;	U_h1 = (h_04 - h1_04);&#xA;	//create JS -- u&#xA;	JS_u = h2_04 / U_h1;&#xA;	//create JS -- v&#xA;	JS_v = (((b_04 - b2_04) / 2) + b2_04) / b_04;&#xA;	//create JS -- mv&#xA;	JS_mv = 1 - ((((b_04 - b2_04) / 2) + b2_04) / b_04);&#xA;	//create JS -- b2_12&#xA;	JS_b2_12 = ((b_10 - 2 * b1_10) - b_07 - 2 * T_d) / 2;&#xA;	//create JS -- b2_34&#xA;	JS_b2_34 = ((b_11 - 2 * b1_10) - t_08 - 2 * T_d) / 2;&#xA;	//create JS -- b2_5&#xA;	JS_b2_5 = b2_12 - b1_10 - (b_04 - (((b_04 - b2_04) / 2) + b2_04));&#xA;	//create Cuboid -- width&#xA;	Cub_w = b_12 - b1_10 - JS_b2_5;&#xA;	/**************************JS1***************************/&#xA;	/***************create quad*******************/&#xA;	_1_JS_Ss = PolySurface.Surfaces(_2_1_JS_S);&#xA;&#xA;	_1_JS_S6 = List.GetItemAtIndex(_1_JS_Ss, 6);&#xA;&#xA;	_1_Q_p = Surface.PointAtParameter(_1_JS_S6, 0.0, 1.0);&#xA;&#xA;	_1_Q_p_trans = Geometry.Translate(_1_Q_p, Q_d_x, Q_d_y, 0.0);&#xA;&#xA;	_1_Q = createQuadCenter(_1_Q_p_trans, Q_r);&#xA;&#xA;	_1_Q_S = Surface.ByPatch(_1_Q);&#xA;	//1&#xA;	result = List.AddItemToEnd(_1_Q_S, result);&#xA;&#xA;	/**************************JS_2***************************/&#xA;	/***************create quad*******************/&#xA;	_2_JS_Ss = PolySurface.Surfaces(_2_2_JS_S);&#xA;&#xA;	_2_JS_S6 = List.GetItemAtIndex(_2_JS_Ss, 6);&#xA;&#xA;	_2_Q_p = Surface.PointAtParameter(_2_JS_S6, 0.0, 1.0);&#xA;&#xA;	_2_Q_p_trans = Geometry.Translate(_2_Q_p, Q_d_x, -Q_d_y, 0.0);&#xA;&#xA;	_2_Q = createQuadCenter(_2_Q_p_trans, Q_r);&#xA;&#xA;	_2_Q_S = Surface.ByPatch(_2_Q);&#xA;	//2&#xA;	result = List.AddItemToEnd(_2_Q_S, result);&#xA;&#xA;	/**************************JS_3***************************/&#xA;	/***************create quad*******************/&#xA;	_3_JS_Ss = PolySurface.Surfaces(_2_3_JS_S);&#xA;&#xA;	_3_JS_S6 = List.GetItemAtIndex(_3_JS_Ss, 6);&#xA;&#xA;	_3_Q_p = Surface.PointAtParameter(_3_JS_S6, 0.0, 1.0);&#xA;&#xA;	_3_Q_p_trans = Geometry.Translate(_3_Q_p, Q_d_x, Q_d_y, 0.0);&#xA;&#xA;	_3_Q = createQuadCenter(_3_Q_p_trans, Q_r);&#xA;&#xA;	_3_Q_S = Surface.ByPatch(_3_Q);&#xA;	//3&#xA;	result = List.AddItemToEnd(_3_Q_S, result);&#xA;&#xA;	/**************************JS_4***************************/&#xA;	/***************create quad*******************/&#xA;	_4_JS_Ss = PolySurface.Surfaces(_2_4_JS_S);&#xA;&#xA;	_4_JS_S6 = List.GetItemAtIndex(_4_JS_Ss, 6);&#xA;&#xA;	_4_Q_p = Surface.PointAtParameter(_4_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_Q_p_trans = Geometry.Translate(_4_Q_p, Q_d_x, -Q_d_y, 0.0);&#xA;&#xA;	_4_Q = createQuadCenter(_4_Q_p_trans, Q_r);&#xA;&#xA;	_4_Q_S = Surface.ByPatch(_4_Q);&#xA;	//4&#xA;	result = List.AddItemToEnd(_4_Q_S, result);&#xA;&#xA;	/**************************JS_5***************************/&#xA;	/***************create quad*******************/&#xA;	_5_JS_Ss = PolySurface.Surfaces(_2_5_JS_S);&#xA;&#xA;	_5_JS_S6 = List.GetItemAtIndex(_5_JS_Ss, 6);&#xA;&#xA;	_5_Q_p = Surface.PointAtParameter(_5_JS_S6, 0.0, 1.0);&#xA;&#xA;	_5_Q_p_trans = Geometry.Translate(_5_Q_p, -Q_d_x, Q_d_y, 0.0);&#xA;&#xA;	_5_Q = createQuadCenter(_5_Q_p_trans, Q_r);&#xA;&#xA;	_5_Q_S = Surface.ByPatch(_5_Q);&#xA;	//5&#xA;	result = List.AddItemToEnd(_5_Q_S, result);&#xA;&#xA;	/*************************JS1************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_1_p_T1 = Surface.PointAtParameter(_1_Q_S, 0.5, 0.0);&#xA;&#xA;	_3_1_direc1 = &quot;y-&quot;;&#xA;	_3_1_T1 = createTrape(_3_1_p_T1, b1_04, b_04, h1_04, T_d, _3_1_direc1);&#xA;&#xA;	_3_1_T1_S = Surface.ByPatch(_3_1_T1);&#xA;	//6&#xA;	result = List.AddItemToEnd(_3_1_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_1_p_T2 = Surface.PointAtParameter(_1_Q_S, 0.5, 1.0);&#xA;&#xA;	_3_1_direc2 = &quot;y+&quot;;&#xA;	_3_1_T2 = createTrape(_3_1_p_T2, b1_04, b_04, h1_04, T_d, _3_1_direc2);&#xA;&#xA;	_3_1_T2_S = Surface.ByPatch(_3_1_T2);&#xA;	//7&#xA;	result = List.AddItemToEnd(_3_1_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_1_p_T3 = Surface.PointAtParameter(_1_Q_S, 1.0, 0.5);&#xA;&#xA;	_3_1_direc3 = &quot;x+&quot;;&#xA;	_3_1_T3 = createTrape(_3_1_p_T3, b1_04, b_04, h1_04, T_d, _3_1_direc3);&#xA;&#xA;	_3_1_T3_S = Surface.ByPatch(_3_1_T3);&#xA;	//8&#xA;	result = List.AddItemToEnd(_3_1_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_1_p_T4 = Surface.PointAtParameter(_1_Q_S, 0.0, 0.5);&#xA;&#xA;	_3_1_direc4 = &quot;x-&quot;;&#xA;	_3_1_T4 = createTrape(_3_1_p_T4, b1_04, b_04, h1_04, T_d, _3_1_direc4);&#xA;&#xA;	_3_1_T4_S = Surface.ByPatch(_3_1_T4);&#xA;	//9&#xA;	result = List.AddItemToEnd(_3_1_T4_S, result);&#xA;&#xA;	/*************************JS2************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_2_p_T1 = Surface.PointAtParameter(_2_Q_S, 0.5, 0.0);&#xA;&#xA;	_3_2_direc1 = &quot;y-&quot;;&#xA;	_3_2_T1 = createTrape(_3_2_p_T1, b1_04, b_04, h1_04, T_d, _3_2_direc1);&#xA;&#xA;	_3_2_T1_S = Surface.ByPatch(_3_2_T1);&#xA;	//10&#xA;	result = List.AddItemToEnd(_3_2_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_2_p_T2 = Surface.PointAtParameter(_2_Q_S, 0.5, 1.0);&#xA;&#xA;	_3_2_direc2 = &quot;y+&quot;;&#xA;	_3_2_T2 = createTrape(_3_2_p_T2, b1_04, b_04, h1_04, T_d, _3_2_direc2);&#xA;&#xA;	_3_2_T2_S = Surface.ByPatch(_3_2_T2);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_2_p_T3 = Surface.PointAtParameter(_2_Q_S, 1.0, 0.5);&#xA;&#xA;	_3_2_direc3 = &quot;x+&quot;;&#xA;	_3_2_T3 = createTrape(_3_2_p_T3, b1_04, b_04, h1_04, T_d, _3_2_direc3);&#xA;&#xA;	_3_2_T3_S = Surface.ByPatch(_3_2_T3);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_2_p_T4 = Surface.PointAtParameter(_2_Q_S, 0.0, 0.5);&#xA;&#xA;	_3_2_direc4 = &quot;x-&quot;;&#xA;	_3_2_T4 = createTrape(_3_2_p_T4, b1_04, b_04, h1_04, T_d, _3_2_direc4);&#xA;&#xA;	_3_2_T4_S = Surface.ByPatch(_3_2_T4);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_T4_S, result);&#xA;&#xA;	/*************************JS3************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_3_p_T1 = Surface.PointAtParameter(_3_Q_S, 0.5, 0.0);&#xA;&#xA;	_3_3_direc1 = &quot;y-&quot;;&#xA;	_3_3_T1 = createTrape(_3_3_p_T1, b1_04, b_04, h1_04, T_d, _3_3_direc1);&#xA;&#xA;	_3_3_T1_S = Surface.ByPatch(_3_3_T1);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_3_p_T2 = Surface.PointAtParameter(_3_Q_S, 0.5, 1.0);&#xA;&#xA;	_3_3_direc2 = &quot;y+&quot;;&#xA;	_3_3_T2 = createTrape(_3_3_p_T2, b1_04, b_04, h1_04, T_d, _3_3_direc2);&#xA;&#xA;	_3_3_T2_S = Surface.ByPatch(_3_3_T2);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_3_p_T3 = Surface.PointAtParameter(_3_Q_S, 1.0, 0.5);&#xA;&#xA;	_3_3_direc3 = &quot;x+&quot;;&#xA;	_3_3_T3 = createTrape(_3_3_p_T3, b1_04, b_04, h1_04, T_d, _3_3_direc3);&#xA;&#xA;	_3_3_T3_S = Surface.ByPatch(_3_3_T3);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_3_p_T4 = Surface.PointAtParameter(_3_Q_S, 0.0, 0.5);&#xA;&#xA;	_3_3_direc4 = &quot;x-&quot;;&#xA;	_3_3_T4 = createTrape(_3_3_p_T4, b1_04, b_04, h1_04, T_d, _3_3_direc4);&#xA;&#xA;	_3_3_T4_S = Surface.ByPatch(_3_3_T4);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_T4_S, result);&#xA;&#xA;	/*************************JS4************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_4_p_T1 = Surface.PointAtParameter(_4_Q_S, 0.5, 0.0);&#xA;&#xA;	_3_4_direc1 = &quot;y-&quot;;&#xA;	_3_4_T1 = createTrape(_3_4_p_T1, b1_04, b_04, h1_04, T_d, _3_4_direc1);&#xA;&#xA;	_3_4_T1_S = Surface.ByPatch(_3_4_T1);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_4_p_T2 = Surface.PointAtParameter(_4_Q_S, 0.5, 1.0);&#xA;&#xA;	_3_4_direc2 = &quot;y+&quot;;&#xA;	_3_4_T2 = createTrape(_3_4_p_T2, b1_04, b_04, h1_04, T_d, _3_4_direc2);&#xA;&#xA;	_3_4_T2_S = Surface.ByPatch(_3_4_T2);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_4_p_T3 = Surface.PointAtParameter(_4_Q_S, 1.0, 0.5);&#xA;&#xA;	_3_4_direc3 = &quot;x+&quot;;&#xA;	_3_4_T3 = createTrape(_3_4_p_T3, b1_04, b_04, h1_04, T_d, _3_4_direc3);&#xA;&#xA;	_3_4_T3_S = Surface.ByPatch(_3_4_T3);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_4_p_T4 = Surface.PointAtParameter(_4_Q_S, 0.0, 0.5);&#xA;&#xA;	_3_4_direc4 = &quot;x-&quot;;&#xA;	_3_4_T4 = createTrape(_3_4_p_T4, b1_04, b_04, h1_04, T_d, _3_4_direc4);&#xA;&#xA;	_3_4_T4_S = Surface.ByPatch(_3_4_T4);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_T4_S, result);&#xA;&#xA;	/*************************JS5************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_3_5_p_T1 = Surface.PointAtParameter(_5_Q_S, 0.5, 0.0);&#xA;&#xA;	_3_5_direc1 = &quot;y-&quot;;&#xA;	_3_5_T1 = createTrape(_3_5_p_T1, b1_04, b_04, h1_04, T_d, _3_5_direc1);&#xA;&#xA;	_3_5_T1_S = Surface.ByPatch(_3_5_T1);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_T1_S, result);&#xA;&#xA;	//T2&#xA;	_3_5_p_T2 = Surface.PointAtParameter(_5_Q_S, 0.5, 1.0);&#xA;&#xA;	_3_5_direc2 = &quot;y+&quot;;&#xA;	_3_5_T2 = createTrape(_3_5_p_T2, b1_04, b_04, h1_04, T_d, _3_5_direc2);&#xA;&#xA;	_3_5_T2_S = Surface.ByPatch(_3_5_T2);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_T2_S, result);&#xA;&#xA;	//T3&#xA;	_3_5_p_T3 = Surface.PointAtParameter(_5_Q_S, 1.0, 0.5);&#xA;&#xA;	_3_5_direc3 = &quot;x+&quot;;&#xA;	_3_5_T3 = createTrape(_3_5_p_T3, b1_04, b_04, h1_04, T_d, _3_5_direc3);&#xA;&#xA;	_3_5_T3_S = Surface.ByPatch(_3_5_T3);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_T3_S, result);&#xA;&#xA;	//T4&#xA;	_3_5_p_T4 = Surface.PointAtParameter(_5_Q_S, 0.0, 0.5);&#xA;&#xA;	_3_5_direc4 = &quot;x-&quot;;&#xA;	_3_5_T4 = createTrape(_3_5_p_T4, b1_04, b_04, h1_04, T_d, _3_5_direc4);&#xA;&#xA;	_3_5_T4_S = Surface.ByPatch(_3_5_T4);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_T4_S, result);&#xA;&#xA;	/*************************JS1*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_1_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_1_p_U1 = Surface.PointAtParameter(_3_1_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_1_U1 = createUPlane(_3_1_p_U1, b_04, b2_04, U_h1, h2_04, _3_1_direc12);&#xA;&#xA;	_3_1_U1_S = Surface.ByPatch(_3_1_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_1_p_U2 = Surface.PointAtParameter(_3_1_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_1_U2 = createUPlane(_3_1_p_U2, b_04, b2_04, U_h1, h2_04, _3_1_direc12);&#xA;&#xA;	_3_1_U2_S = Surface.ByPatch(_3_1_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_U2_S, result);&#xA;&#xA;	_3_1_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_1_p_U3 = Surface.PointAtParameter(_3_1_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_1_U3 = createUPlane(_3_1_p_U3, b_04, b2_04, U_h1, h2_04, _3_1_direc34);&#xA;&#xA;	_3_1_U3_S = Surface.ByPatch(_3_1_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_1_p_U4 = Surface.PointAtParameter(_3_1_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_1_U4 = createUPlane(_3_1_p_U4, b_04, b2_04, U_h1, h2_04, _3_1_direc34);&#xA;&#xA;	_3_1_U4_S = Surface.ByPatch(_3_1_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_U4_S, result);&#xA;&#xA;	/*************************JS2*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_2_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_2_p_U1 = Surface.PointAtParameter(_3_2_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_2_U1 = createUPlane(_3_2_p_U1, b_04, b2_04, U_h1, h2_04, _3_2_direc12);&#xA;&#xA;	_3_2_U1_S = Surface.ByPatch(_3_2_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_2_p_U2 = Surface.PointAtParameter(_3_2_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_2_U2 = createUPlane(_3_2_p_U2, b_04, b2_04, U_h1, h2_04, _3_2_direc12);&#xA;&#xA;	_3_2_U2_S = Surface.ByPatch(_3_2_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_U2_S, result);&#xA;&#xA;	_3_2_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_2_p_U3 = Surface.PointAtParameter(_3_2_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_2_U3 = createUPlane(_3_2_p_U3, b_04, b2_04, U_h1, h2_04, _3_2_direc34);&#xA;&#xA;	_3_2_U3_S = Surface.ByPatch(_3_2_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_2_p_U4 = Surface.PointAtParameter(_3_2_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_2_U4 = createUPlane(_3_2_p_U4, b_04, b2_04, U_h1, h2_04, _3_2_direc34);&#xA;&#xA;	_3_2_U4_S = Surface.ByPatch(_3_2_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_U4_S, result);&#xA;&#xA;	/*************************JS3*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_3_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_3_p_U1 = Surface.PointAtParameter(_3_3_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_3_U1 = createUPlane(_3_3_p_U1, b_04, b2_04, U_h1, h2_04, _3_3_direc12);&#xA;&#xA;	_3_3_U1_S = Surface.ByPatch(_3_3_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_3_p_U2 = Surface.PointAtParameter(_3_3_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_3_U2 = createUPlane(_3_3_p_U2, b_04, b2_04, U_h1, h2_04, _3_3_direc12);&#xA;&#xA;	_3_3_U2_S = Surface.ByPatch(_3_3_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_U2_S, result);&#xA;&#xA;	_3_3_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_3_p_U3 = Surface.PointAtParameter(_3_3_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_3_U3 = createUPlane(_3_3_p_U3, b_04, b2_04, U_h1, h2_04, _3_3_direc34);&#xA;&#xA;	_3_3_U3_S = Surface.ByPatch(_3_3_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_3_p_U4 = Surface.PointAtParameter(_3_3_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_3_U4 = createUPlane(_3_3_p_U4, b_04, b2_04, U_h1, h2_04, _3_3_direc34);&#xA;&#xA;	_3_3_U4_S = Surface.ByPatch(_3_3_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_U4_S, result);&#xA;&#xA;	/*************************JS4*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_4_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_4_p_U1 = Surface.PointAtParameter(_3_4_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_4_U1 = createUPlane(_3_4_p_U1, b_04, b2_04, U_h1, h2_04, _3_4_direc12);&#xA;&#xA;	_3_4_U1_S = Surface.ByPatch(_3_4_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_4_p_U2 = Surface.PointAtParameter(_3_4_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_4_U2 = createUPlane(_3_4_p_U2, b_04, b2_04, U_h1, h2_04, _3_4_direc12);&#xA;&#xA;	_3_4_U2_S = Surface.ByPatch(_3_4_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_U2_S, result);&#xA;&#xA;	_3_4_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_4_p_U3 = Surface.PointAtParameter(_3_4_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_4_U3 = createUPlane(_3_4_p_U3, b_04, b2_04, U_h1, h2_04, _3_4_direc34);&#xA;&#xA;	_3_4_U3_S = Surface.ByPatch(_3_4_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_4_p_U4 = Surface.PointAtParameter(_3_4_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_4_U4 = createUPlane(_3_4_p_U4, b_04, b2_04, U_h1, h2_04, _3_4_direc34);&#xA;&#xA;	_3_4_U4_S = Surface.ByPatch(_3_4_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_U4_S, result);&#xA;&#xA;	/*************************JS5*****************************/&#xA;	/**************create U plane********************/&#xA;	_3_5_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_3_5_p_U1 = Surface.PointAtParameter(_3_5_T1_S, 0.5, 0.0);&#xA;&#xA;	_3_5_U1 = createUPlane(_3_5_p_U1, b_04, b2_04, U_h1, h2_04, _3_5_direc12);&#xA;&#xA;	_3_5_U1_S = Surface.ByPatch(_3_5_U1);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_U1_S, result);&#xA;&#xA;	//U2&#xA;	_3_5_p_U2 = Surface.PointAtParameter(_3_5_T2_S, 0.5, 1.0);&#xA;&#xA;	_3_5_U2 = createUPlane(_3_5_p_U2, b_04, b2_04, U_h1, h2_04, _3_5_direc12);&#xA;&#xA;	_3_5_U2_S = Surface.ByPatch(_3_5_U2);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_U2_S, result);&#xA;&#xA;	_3_5_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_3_5_p_U3 = Surface.PointAtParameter(_3_5_T3_S, 0.0, 0.5);&#xA;&#xA;	_3_5_U3 = createUPlane(_3_5_p_U3, b_04, b2_04, U_h1, h2_04, _3_5_direc34);&#xA;&#xA;	_3_5_U3_S = Surface.ByPatch(_3_5_U3);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_U3_S, result);&#xA;&#xA;	//U4&#xA;	_3_5_p_U4 = Surface.PointAtParameter(_3_5_T4_S, 0.0, 0.5);&#xA;&#xA;	_3_5_U4 = createUPlane(_3_5_p_U4, b_04, b2_04, U_h1, h2_04, _3_5_direc34);&#xA;&#xA;	_3_5_U4_S = Surface.ByPatch(_3_5_U4);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_U4_S, result);&#xA;&#xA;	/***********************_1_JS***************************/&#xA;	_3_1_direc = &quot;y-&quot;;&#xA;	//JS_C1&#xA;	_3_1_JS_C1_p = Surface.PointAtParameter(_3_3_U1_S, JS_u, JS_v);&#xA;&#xA;	_3_1_JS_C1 = createJuanshaCurve(_3_1_JS_C1_p, b1_10, JS_b2_12, m, h1_10,&#xA;	h_10, _3_1_direc);&#xA;&#xA;	_3_1_JS_C1_S = Surface.ByPatch(_3_1_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_1_JS_C2_p = Surface.PointAtParameter(_3_3_U1_S, JS_u, JS_mv);&#xA;&#xA;	_3_1_JS_C2 = createJuanshaCurve(_3_1_JS_C2_p, b1_10, JS_b2_12, m, h1_10,&#xA;	h_10, _3_1_direc);&#xA;&#xA;	_3_1_JS_C2_S = Surface.ByPatch(_3_1_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_JS_C2_S, result);&#xA;&#xA;	_3_1_JS = {};&#xA;	_3_1_JS = List.AddItemToEnd(_3_1_JS_C1, _3_1_JS);&#xA;	_3_1_JS = List.AddItemToEnd(_3_1_JS_C2, _3_1_JS);&#xA;	_3_1_JS_S = PolySurface.ByLoft(_3_1_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_JS_S, result);&#xA;&#xA;	/***************************_2_JS****************************/&#xA;	_3_2_direc = &quot;y+&quot;;&#xA;	//JS_C1&#xA;	_3_2_JS1_C1_p = Surface.PointAtParameter(_3_4_U2_S, JS_u, JS_v);&#xA;&#xA;	_3_2_JS_C1 = createJuanshaCurve(_3_2_JS1_C1_p, b1_10, JS_b2_12, m, h1_10,&#xA;	h_10, _3_2_direc);&#xA;&#xA;	_3_2_JS_C1_S = Surface.ByPatch(_3_2_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_2_JS1_C2_p = Surface.PointAtParameter(_3_4_U2_S, JS_u, JS_mv);&#xA;&#xA;	_3_2_JS_C2 = createJuanshaCurve(_3_2_JS1_C2_p, b1_10, JS_b2_12, m, h1_10,&#xA;	h_10, _3_2_direc);&#xA;&#xA;	_3_2_JS_C2_S = Surface.ByPatch(_3_2_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_JS_C2_S, result);&#xA;&#xA;	_3_2_JS = {};&#xA;	_3_2_JS = List.AddItemToEnd(_3_2_JS_C1, _3_2_JS);&#xA;	_3_2_JS = List.AddItemToEnd(_3_2_JS_C2, _3_2_JS);&#xA;	_3_2_JS_S = PolySurface.ByLoft(_3_2_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_JS_S, result);&#xA;&#xA;	/***************************_3_JS****************************/&#xA;	_3_3_direc = &quot;y-&quot;;&#xA;	//JS_C1&#xA;	_3_3_JS1_C1_p = Surface.PointAtParameter(_3_5_U1_S, JS_u, JS_v);&#xA;&#xA;	_3_3_JS_C1 = createJuanshaCurve(_3_3_JS1_C1_p, b1_10, JS_b2_34, m, h1_10,&#xA;	h_10, _3_3_direc);&#xA;&#xA;	_3_3_JS_C1_S = Surface.ByPatch(_3_3_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_3_JS1_C2_p = Surface.PointAtParameter(_3_5_U1_S, JS_u, JS_mv);&#xA;&#xA;	_3_3_JS_C2 = createJuanshaCurve(_3_3_JS1_C2_p, b1_10, JS_b2_34, m, h1_10,&#xA;	h_10, _3_3_direc);&#xA;&#xA;	_3_3_JS_C2_S = Surface.ByPatch(_3_3_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_JS_C2_S, result);&#xA;&#xA;	_3_3_JS = {};&#xA;	_3_3_JS = List.AddItemToEnd(_3_3_JS_C1, _3_3_JS);&#xA;	_3_3_JS = List.AddItemToEnd(_3_3_JS_C2, _3_3_JS);&#xA;	_3_3_JS_S = PolySurface.ByLoft(_3_3_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_3_JS_S, result);&#xA;&#xA;	/***************************_4_JS****************************/&#xA;	_3_4_direc = &quot;y+&quot;;&#xA;	//JS_C1&#xA;	_3_4_JS1_C1_p = Surface.PointAtParameter(_3_5_U2_S, JS_u, JS_v);&#xA;&#xA;	_3_4_JS_C1 = createJuanshaCurve(_3_4_JS1_C1_p, b1_10, JS_b2_34, m, h1_10,&#xA;	h_10, _3_4_direc);&#xA;&#xA;	_3_4_JS_C1_S = Surface.ByPatch(_3_4_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_4_JS1_C2_p = Surface.PointAtParameter(_3_5_U2_S, JS_u, JS_mv);&#xA;&#xA;	_3_4_JS_C2 = createJuanshaCurve(_3_4_JS1_C2_p, b1_10, JS_b2_34, m, h1_10,&#xA;	h_10, _3_4_direc);&#xA;&#xA;	_3_4_JS_C2_S = Surface.ByPatch(_3_4_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_JS_C2_S, result);&#xA;&#xA;	_3_4_JS = {};&#xA;	_3_4_JS = List.AddItemToEnd(_3_4_JS_C1, _3_4_JS);&#xA;	_3_4_JS = List.AddItemToEnd(_3_4_JS_C2, _3_4_JS);&#xA;	_3_4_JS_S = PolySurface.ByLoft(_3_4_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_4_JS_S, result);&#xA;&#xA;	/***************************_5_JS****************************/&#xA;	_3_5_direc = &quot;x+&quot;;&#xA;	//JS_C1&#xA;	_3_5_JS_C1_p = Surface.PointAtParameter(_3_5_U3_S, JS_u, JS_v);&#xA;&#xA;	_3_5_JS_C1 = createJuanshaCurve(_3_5_JS_C1_p, b1_10, JS_b2_5, m, h1_10,&#xA;	h_10, _3_5_direc);&#xA;&#xA;	_3_5_JS_C1_S = Surface.ByPatch(_3_5_JS_C1);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_JS_C1_S, result);&#xA;&#xA;	//JS_C2&#xA;	_3_5_JS_C2_p = Surface.PointAtParameter(_3_5_U3_S, JS_u, JS_mv);&#xA;&#xA;	_3_5_JS_C2 = createJuanshaCurve(_3_5_JS_C2_p, b1_10, JS_b2_5, m, h1_10,&#xA;	h_10, _3_5_direc);&#xA;&#xA;	_3_5_JS_C2_S = Surface.ByPatch(_3_5_JS_C2);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_JS_C2_S, result);&#xA;&#xA;	_3_5_JS = {};&#xA;	_3_5_JS = List.AddItemToEnd(_3_5_JS_C1, _3_5_JS);&#xA;	_3_5_JS = List.AddItemToEnd(_3_5_JS_C2, _3_5_JS);&#xA;	_3_5_JS_S = PolySurface.ByLoft(_3_5_JS);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_JS_S, result);&#xA;&#xA;	/*************************create cuboid 1**************************/&#xA;	_3_1_JS_Ss = PolySurface.Surfaces(_3_1_JS_S);&#xA;	_3_1_JS_S7 = List.GetItemAtIndex(_3_1_JS_Ss, 7);&#xA;&#xA;	_3_1_JS_C7 = Surface.PerimeterCurves(_3_1_JS_S7);&#xA;&#xA;	_3_1_JS_PC7 = PolyCurve.ByJoinedCurves(_3_1_JS_C7);&#xA;&#xA;	_3_2_JS_Ss = PolySurface.Surfaces(_3_2_JS_S);&#xA;	_3_2_JS_S7 = List.GetItemAtIndex(_3_2_JS_Ss, 7);&#xA;&#xA;	_3_2_JS_C7 = Surface.PerimeterCurves(_3_2_JS_S7);&#xA;&#xA;	_3_2_JS_PC7 = PolyCurve.ByJoinedCurves(_3_2_JS_C7);&#xA;&#xA;	_3_1_Cub = {};&#xA;&#xA;	_3_1_Cub = List.AddItemToEnd(_3_1_JS_PC7, _3_1_Cub);&#xA;	_3_1_Cub = List.AddItemToEnd(_3_2_JS_PC7, _3_1_Cub);&#xA;	_3_1_Cub_S = PolySurface.ByLoft(_3_1_Cub);&#xA;&#xA;	result = List.AddItemToEnd(_3_1_Cub_S, result);&#xA;&#xA;	/*************************create cuboid 2**************************/&#xA;	_3_3_JS_Ss = PolySurface.Surfaces(_3_3_JS_S);&#xA;	_3_3_JS_S7 = List.GetItemAtIndex(_3_3_JS_Ss, 7);&#xA;&#xA;	_3_3_JS_C7 = Surface.PerimeterCurves(_3_3_JS_S7);&#xA;&#xA;	_3_3_JS_PC7 = PolyCurve.ByJoinedCurves(_3_3_JS_C7);&#xA;&#xA;	_3_4_JS_Ss = PolySurface.Surfaces(_3_4_JS_S);&#xA;	_3_4_JS_S7 = List.GetItemAtIndex(_3_4_JS_Ss, 7);&#xA;&#xA;	_3_4_JS_C7 = Surface.PerimeterCurves(_3_4_JS_S7);&#xA;&#xA;	_3_4_JS_PC7 = PolyCurve.ByJoinedCurves(_3_4_JS_C7);&#xA;&#xA;	_3_2_Cub = {};&#xA;&#xA;	_3_2_Cub = List.AddItemToEnd(_3_3_JS_PC7, _3_2_Cub);&#xA;	_3_2_Cub = List.AddItemToEnd(_3_4_JS_PC7, _3_2_Cub);&#xA;	_3_2_Cub_S = PolySurface.ByLoft(_3_2_Cub);&#xA;&#xA;	result = List.AddItemToEnd(_3_2_Cub_S, result);&#xA;&#xA;	/*********************create cuboid***************************/&#xA;	_3_5_JS_Ss = PolySurface.Surfaces(_3_5_JS_S);&#xA;	_3_5_JS_S7 = List.GetItemAtIndex(_3_5_JS_Ss, 7);&#xA;&#xA;	_3_5_JS_C7 = Surface.PerimeterCurves(_3_5_JS_S7);&#xA;&#xA;	_3_5_JS_C7_0 = List.GetItemAtIndex(_3_5_JS_C7, 0);&#xA;	_3_5_JS_C7_1 = List.GetItemAtIndex(_3_5_JS_C7, 1);&#xA;	_3_5_JS_C7_2 = List.GetItemAtIndex(_3_5_JS_C7, 2);&#xA;	_3_5_JS_C7_3 = List.GetItemAtIndex(_3_5_JS_C7, 3);&#xA;&#xA;	_3_5_JS_PC_f_1 = PolyCurve.ByJoinedCurves(_3_5_JS_C7);&#xA;&#xA;	direc = &quot;x-&quot;;&#xA;&#xA;	_3_5_JS_PC0 = createCubiod(_3_5_JS_C7_0, Cub_w, direc);&#xA;	_3_5_JS_PC1 = createCubiod(_3_5_JS_C7_1, Cub_w, direc);&#xA;	_3_5_JS_PC2 = createCubiod(_3_5_JS_C7_2, Cub_w, direc);&#xA;	_3_5_JS_PC3 = createCubiod(_3_5_JS_C7_3, Cub_w, direc);&#xA;&#xA;	_3_5_JS_0_4 = {};&#xA;&#xA;	_3_5_JS_0_4 = List.AddItemToEnd(_3_5_JS_PC0, _3_5_JS_0_4);&#xA;	_3_5_JS_0_4 = List.AddItemToEnd(_3_5_JS_PC1, _3_5_JS_0_4);&#xA;	_3_5_JS_0_4 = List.AddItemToEnd(_3_5_JS_PC2, _3_5_JS_0_4);&#xA;	_3_5_JS_0_4 = List.AddItemToEnd(_3_5_JS_PC3, _3_5_JS_0_4);&#xA;&#xA;	_3_5_JS_PC_f_2 = PolyCurve.ByJoinedCurves(_3_5_JS_0_4);&#xA;&#xA;	_3_5_JS_Cub = {};&#xA;&#xA;	_3_5_JS_Cub = List.AddItemToEnd(_3_5_JS_PC_f_1, _3_5_JS_Cub);&#xA;	_3_5_JS_Cub = List.AddItemToEnd(_3_5_JS_PC_f_2, _3_5_JS_Cub);&#xA;&#xA;	_3_5_JS_Cub_S = Solid.ByLoft(_3_5_JS_Cub);&#xA;&#xA;	result = List.AddItemToEnd(_3_5_JS_Cub_S, result);&#xA;&#xA;	/****************************create fang******************************/&#xA;	_3_S_pC = Surface.PointAtParameter(_3_2_U2_S, JS_u, JS_v);&#xA;&#xA;	_3_S_pD = Solid.Centroid(_3_5_JS_Cub_S);&#xA;&#xA;	_3_F_pC = getNDGFangCenterPoint(_3_S_pC, _3_S_pD, h_12 / 2);&#xA;&#xA;	_3_F_Cub = Cuboid.ByLengths(_3_F_pC, t_09, b_09, h_09);&#xA;&#xA;	result = List.AddItemToEnd(_3_F_Cub, result);&#xA;&#xA;&#xA;	return = result;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="7a8d6cb8-4424-4325-a13f-c35bc58b502a" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-635.987347784167" y="3239.40996829034" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="//create fourth&#xA;&#xA;def createFourth(_3_1_Q_S, _3_2_Q_S, _3_1_JS_S, _3_2_JS_S, _3_3_JS_S,&#xA;_3_4_JS_S, _3_5_JS_S, b2_01, b1_04, h_09, b2_04, h_04, h2_04, h2_05, h1_04,&#xA;b_04, h_13, w_13, l_13, w_14, l_14, b1_15, t_15, b_15, h_15, centerPoint,&#xA;h_01, h_16, r_16)&#xA;{&#xA;	result = {};&#xA;	//create quad -- dz&#xA;	_4_Q_dz = (h_04 - h2_04) + h_09;&#xA;	//create quad -- dx&#xA;	_4_Q_dx = b2_04 / 2;&#xA;	//create quad -- dy&#xA;	_4_Q_dy = b2_01 / 2;&#xA;	//create quad -- r&#xA;	_4_Q_r = b1_04 / 2;&#xA;	//create Trape -- d&#xA;	_4_T_d = (b_04 - b1_04) / 2;&#xA;	//create U palne -- h1&#xA;	_4_U_h1 = (h_04 - h1_04);&#xA;	//create MidPoint -- dh&#xA;	_4_MP_dh = h_04 - h1_04 - h2_04;&#xA;	//create Fang -- dz&#xA;	_4_F_dz = h_04 - h2_04 + h_13 / 2;&#xA;	//create JS -- u&#xA;	_4_JS_u = h2_04 / _4_U_h1;&#xA;	//create JS -- v&#xA;	_4_JS_v = (((b_04 - b2_04) / 2) + b2_04) / b_04;&#xA;	//create Fang db&#xA;	_4_F_db = b1_15 - (b_04 - _4_JS_v);&#xA;	/******************************Direct 1*******************************/&#xA;	/********************create quad********************/&#xA;	_4_1_Q_p = Surface.PointAtParameter(_3_1_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_1_Q_p_trans = Geometry.Translate(_4_1_Q_p, 0.0, 0.0, _4_Q_dz);&#xA;&#xA;	_4_1_Q = createQuadCenter(_4_1_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_1_Q_S = Surface.ByPatch(_4_1_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_Q_S, result);&#xA;&#xA;	/******************************Direct 2*******************************/&#xA;	/********************create quad********************/&#xA;	_4_2_Q_p = Surface.PointAtParameter(_3_2_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_2_Q_p_trans = Geometry.Translate(_4_2_Q_p, 0.0, 0.0, _4_Q_dz);&#xA;&#xA;	_4_2_Q = createQuadCenter(_4_2_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_2_Q_S = Surface.ByPatch(_4_2_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_Q_S, result);&#xA;&#xA;	/******************************Direct 3*******************************/&#xA;	/********************create quad********************/&#xA;	_3_1_JS_Ss = PolySurface.Surfaces(_3_1_JS_S);&#xA;&#xA;	_3_1_JS_S6 = List.GetItemAtIndex(_3_1_JS_Ss, 6);&#xA;&#xA;	_4_3_Q_p = Surface.PointAtParameter(_3_1_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_3_Q_p_trans = Geometry.Translate(_4_3_Q_p, _4_Q_dx, _4_Q_dy, 0.0);&#xA;&#xA;	_4_3_Q = createQuadCenter(_4_3_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_3_Q_S = Surface.ByPatch(_4_3_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_Q_S, result);&#xA;&#xA;	/******************************Direct 4*******************************/&#xA;	/********************create quad********************/&#xA;	_3_2_JS_Ss = PolySurface.Surfaces(_3_2_JS_S);&#xA;&#xA;	_3_2_JS_S6 = List.GetItemAtIndex(_3_2_JS_Ss, 6);&#xA;&#xA;	_4_4_Q_p = Surface.PointAtParameter(_3_2_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_4_Q_p_trans = Geometry.Translate(_4_4_Q_p, _4_Q_dx, -_4_Q_dy, 0.0);&#xA;&#xA;	_4_4_Q = createQuadCenter(_4_4_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_4_Q_S = Surface.ByPatch(_4_4_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_Q_S, result);&#xA;&#xA;	/******************************Direct 5*******************************/&#xA;	/********************create quad********************/&#xA;	_3_3_JS_Ss = PolySurface.Surfaces(_3_3_JS_S);&#xA;&#xA;	_3_3_JS_S6 = List.GetItemAtIndex(_3_3_JS_Ss, 6);&#xA;&#xA;	_4_5_Q_p = Surface.PointAtParameter(_3_3_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_5_Q_p_trans = Geometry.Translate(_4_5_Q_p, _4_Q_dx, _4_Q_dy, 0.0);&#xA;&#xA;	_4_5_Q = createQuadCenter(_4_5_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_5_Q_S = Surface.ByPatch(_4_5_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_Q_S, result);&#xA;&#xA;	/******************************Direct 6*******************************/&#xA;	/********************create quad********************/&#xA;	_3_4_JS_Ss = PolySurface.Surfaces(_3_4_JS_S);&#xA;&#xA;	_3_4_JS_S6 = List.GetItemAtIndex(_3_4_JS_Ss, 6);&#xA;&#xA;	_4_6_Q_p = Surface.PointAtParameter(_3_4_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_6_Q_p_trans = Geometry.Translate(_4_6_Q_p, _4_Q_dx, -_4_Q_dy, 0.0);&#xA;&#xA;	_4_6_Q = createQuadCenter(_4_6_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_6_Q_S = Surface.ByPatch(_4_6_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_Q_S, result);&#xA;&#xA;	/******************************Direct 7*******************************/&#xA;	/********************create quad********************/&#xA;	_3_5_JS_Ss = PolySurface.Surfaces(_3_5_JS_S);&#xA;&#xA;	_3_5_JS_S6 = List.GetItemAtIndex(_3_5_JS_Ss, 6);&#xA;&#xA;	_4_7_Q_p = Surface.PointAtParameter(_3_5_JS_S6, 0.0, 1.0);&#xA;&#xA;	_4_7_Q_p_trans = Geometry.Translate(_4_7_Q_p, -_4_Q_dx, _4_Q_dy, 0.0);&#xA;&#xA;	_4_7_Q = createQuadCenter(_4_7_Q_p_trans, _4_Q_r);&#xA;&#xA;	_4_7_Q_S = Surface.ByPatch(_4_7_Q);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_Q_S, result);&#xA;&#xA;	/*************************JS1************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_1_p_T1 = Surface.PointAtParameter(_4_1_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_1_direc1 = &quot;y-&quot;;&#xA;	_4_1_T1 = createTrape(_4_1_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_1_direc1);&#xA;&#xA;	_4_1_T1_S = Surface.ByPatch(_4_1_T1);&#xA;	//6&#xA;	result = List.AddItemToEnd(_4_1_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_1_p_T2 = Surface.PointAtParameter(_4_1_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_1_direc2 = &quot;y+&quot;;&#xA;	_4_1_T2 = createTrape(_4_1_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_1_direc2);&#xA;&#xA;	_4_1_T2_S = Surface.ByPatch(_4_1_T2);&#xA;	//7&#xA;	result = List.AddItemToEnd(_4_1_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_1_p_T3 = Surface.PointAtParameter(_4_1_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_1_direc3 = &quot;x+&quot;;&#xA;	_4_1_T3 = createTrape(_4_1_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_1_direc3);&#xA;&#xA;	_4_1_T3_S = Surface.ByPatch(_4_1_T3);&#xA;	//8&#xA;	result = List.AddItemToEnd(_4_1_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_1_p_T4 = Surface.PointAtParameter(_4_1_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_1_direc4 = &quot;x-&quot;;&#xA;	_4_1_T4 = createTrape(_4_1_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_1_direc4);&#xA;&#xA;	_4_1_T4_S = Surface.ByPatch(_4_1_T4);&#xA;	//9&#xA;	result = List.AddItemToEnd(_4_1_T4_S, result);&#xA;&#xA;	/*************************JS2************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_2_p_T1 = Surface.PointAtParameter(_4_2_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_2_direc1 = &quot;y-&quot;;&#xA;	_4_2_T1 = createTrape(_4_2_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_2_direc1);&#xA;&#xA;	_4_2_T1_S = Surface.ByPatch(_4_2_T1);&#xA;	//10&#xA;	result = List.AddItemToEnd(_4_2_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_2_p_T2 = Surface.PointAtParameter(_4_2_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_2_direc2 = &quot;y+&quot;;&#xA;	_4_2_T2 = createTrape(_4_2_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_2_direc2);&#xA;&#xA;	_4_2_T2_S = Surface.ByPatch(_4_2_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_2_p_T3 = Surface.PointAtParameter(_4_2_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_2_direc3 = &quot;x+&quot;;&#xA;	_4_2_T3 = createTrape(_4_2_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_2_direc3);&#xA;&#xA;	_4_2_T3_S = Surface.ByPatch(_4_2_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_2_p_T4 = Surface.PointAtParameter(_4_2_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_2_direc4 = &quot;x-&quot;;&#xA;	_4_2_T4 = createTrape(_4_2_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_2_direc4);&#xA;&#xA;	_4_2_T4_S = Surface.ByPatch(_4_2_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_T4_S, result);&#xA;&#xA;	/*************************JS3************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_3_p_T1 = Surface.PointAtParameter(_4_3_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_3_direc1 = &quot;y-&quot;;&#xA;	_4_3_T1 = createTrape(_4_3_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_3_direc1);&#xA;&#xA;	_4_3_T1_S = Surface.ByPatch(_4_3_T1);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_3_p_T2 = Surface.PointAtParameter(_4_3_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_3_direc2 = &quot;y+&quot;;&#xA;	_4_3_T2 = createTrape(_4_3_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_3_direc2);&#xA;&#xA;	_4_3_T2_S = Surface.ByPatch(_4_3_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_3_p_T3 = Surface.PointAtParameter(_4_3_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_3_direc3 = &quot;x+&quot;;&#xA;	_4_3_T3 = createTrape(_4_3_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_3_direc3);&#xA;&#xA;	_4_3_T3_S = Surface.ByPatch(_4_3_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_3_p_T4 = Surface.PointAtParameter(_4_3_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_3_direc4 = &quot;x-&quot;;&#xA;	_4_3_T4 = createTrape(_4_3_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_3_direc4);&#xA;&#xA;	_4_3_T4_S = Surface.ByPatch(_4_3_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_T4_S, result);&#xA;&#xA;	/*************************JS4************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_4_p_T1 = Surface.PointAtParameter(_4_4_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_4_direc1 = &quot;y-&quot;;&#xA;	_4_4_T1 = createTrape(_4_4_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_4_direc1);&#xA;&#xA;	_4_4_T1_S = Surface.ByPatch(_4_4_T1);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_4_p_T2 = Surface.PointAtParameter(_4_4_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_4_direc2 = &quot;y+&quot;;&#xA;	_4_4_T2 = createTrape(_4_4_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_4_direc2);&#xA;&#xA;	_4_4_T2_S = Surface.ByPatch(_4_4_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_4_p_T3 = Surface.PointAtParameter(_4_4_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_4_direc3 = &quot;x+&quot;;&#xA;	_4_4_T3 = createTrape(_4_4_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_4_direc3);&#xA;&#xA;	_4_4_T3_S = Surface.ByPatch(_4_4_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_4_p_T4 = Surface.PointAtParameter(_4_4_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_4_direc4 = &quot;x-&quot;;&#xA;	_4_4_T4 = createTrape(_4_4_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_4_direc4);&#xA;&#xA;	_4_4_T4_S = Surface.ByPatch(_4_4_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_T4_S, result);&#xA;&#xA;	/*************************JS5************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_5_p_T1 = Surface.PointAtParameter(_4_5_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_5_direc1 = &quot;y-&quot;;&#xA;	_4_5_T1 = createTrape(_4_5_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_5_direc1);&#xA;&#xA;	_4_5_T1_S = Surface.ByPatch(_4_5_T1);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_5_p_T2 = Surface.PointAtParameter(_4_5_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_5_direc2 = &quot;y+&quot;;&#xA;	_4_5_T2 = createTrape(_4_5_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_5_direc2);&#xA;&#xA;	_4_5_T2_S = Surface.ByPatch(_4_5_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_5_p_T3 = Surface.PointAtParameter(_4_5_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_5_direc3 = &quot;x+&quot;;&#xA;	_4_5_T3 = createTrape(_4_5_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_5_direc3);&#xA;&#xA;	_4_5_T3_S = Surface.ByPatch(_4_5_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_5_p_T4 = Surface.PointAtParameter(_4_5_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_5_direc4 = &quot;x-&quot;;&#xA;	_4_5_T4 = createTrape(_4_5_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_5_direc4);&#xA;&#xA;	_4_5_T4_S = Surface.ByPatch(_4_5_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_T4_S, result);&#xA;&#xA;	/*************************JS6************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_6_p_T1 = Surface.PointAtParameter(_4_6_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_6_direc1 = &quot;y-&quot;;&#xA;	_4_6_T1 = createTrape(_4_6_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_6_direc1);&#xA;&#xA;	_4_6_T1_S = Surface.ByPatch(_4_6_T1);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_6_p_T2 = Surface.PointAtParameter(_4_6_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_6_direc2 = &quot;y+&quot;;&#xA;	_4_6_T2 = createTrape(_4_6_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_6_direc2);&#xA;&#xA;	_4_6_T2_S = Surface.ByPatch(_4_6_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_6_p_T3 = Surface.PointAtParameter(_4_6_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_6_direc3 = &quot;x+&quot;;&#xA;	_4_6_T3 = createTrape(_4_6_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_6_direc3);&#xA;&#xA;	_4_6_T3_S = Surface.ByPatch(_4_6_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_6_p_T4 = Surface.PointAtParameter(_4_6_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_6_direc4 = &quot;x-&quot;;&#xA;	_4_6_T4 = createTrape(_4_6_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_6_direc4);&#xA;&#xA;	_4_6_T4_S = Surface.ByPatch(_4_6_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_T4_S, result);&#xA;&#xA;	/*************************JS7************************/&#xA;	/**********create Trape**********/&#xA;	//T1&#xA;	_4_7_p_T1 = Surface.PointAtParameter(_4_7_Q_S, 0.5, 0.0);&#xA;&#xA;	_4_7_direc1 = &quot;y-&quot;;&#xA;	_4_7_T1 = createTrape(_4_7_p_T1, b1_04, b_04, h1_04, _4_T_d, _4_7_direc1);&#xA;&#xA;	_4_7_T1_S = Surface.ByPatch(_4_7_T1);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_T1_S, result);&#xA;&#xA;	//T2&#xA;	_4_7_p_T2 = Surface.PointAtParameter(_4_7_Q_S, 0.5, 1.0);&#xA;&#xA;	_4_7_direc2 = &quot;y+&quot;;&#xA;	_4_7_T2 = createTrape(_4_7_p_T2, b1_04, b_04, h1_04, _4_T_d, _4_7_direc2);&#xA;&#xA;	_4_7_T2_S = Surface.ByPatch(_4_7_T2);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_T2_S, result);&#xA;&#xA;	//T3&#xA;	_4_7_p_T3 = Surface.PointAtParameter(_4_7_Q_S, 1.0, 0.5);&#xA;&#xA;	_4_7_direc3 = &quot;x+&quot;;&#xA;	_4_7_T3 = createTrape(_4_7_p_T3, b1_04, b_04, h1_04, _4_T_d, _4_7_direc3);&#xA;&#xA;	_4_7_T3_S = Surface.ByPatch(_4_7_T3);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_T3_S, result);&#xA;&#xA;	//T4&#xA;	_4_7_p_T4 = Surface.PointAtParameter(_4_7_Q_S, 0.0, 0.5);&#xA;&#xA;	_4_7_direc4 = &quot;x-&quot;;&#xA;	_4_7_T4 = createTrape(_4_7_p_T4, b1_04, b_04, h1_04, _4_T_d, _4_7_direc4);&#xA;&#xA;	_4_7_T4_S = Surface.ByPatch(_4_7_T4);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_T4_S, result);&#xA;&#xA;	/*************************JS1*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_1_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_1_p_U1 = Surface.PointAtParameter(_4_1_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_1_U1 = createUPlane(_4_1_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_1_direc12);&#xA;&#xA;	_4_1_U1_S = Surface.ByPatch(_4_1_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_1_p_U2 = Surface.PointAtParameter(_4_1_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_1_U2 = createUPlane(_4_1_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_1_direc12);&#xA;&#xA;	_4_1_U2_S = Surface.ByPatch(_4_1_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_U2_S, result);&#xA;&#xA;	_4_1_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_1_p_U3 = Surface.PointAtParameter(_4_1_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_1_U3 = createUPlane(_4_1_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_1_direc34);&#xA;&#xA;	_4_1_U3_S = Surface.ByPatch(_4_1_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_1_p_U4 = Surface.PointAtParameter(_4_1_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_1_U4 = createUPlane(_4_1_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_1_direc34);&#xA;&#xA;	_4_1_U4_S = Surface.ByPatch(_4_1_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_U4_S, result);&#xA;&#xA;	/*************************JS2*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_2_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_2_p_U1 = Surface.PointAtParameter(_4_2_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_2_U1 = createUPlane(_4_2_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_2_direc12);&#xA;&#xA;	_4_2_U1_S = Surface.ByPatch(_4_2_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_2_p_U2 = Surface.PointAtParameter(_4_2_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_2_U2 = createUPlane(_4_2_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_2_direc12);&#xA;&#xA;	_4_2_U2_S = Surface.ByPatch(_4_2_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_U2_S, result);&#xA;&#xA;	_4_2_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_2_p_U3 = Surface.PointAtParameter(_4_2_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_2_U3 = createUPlane(_4_2_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_2_direc34);&#xA;&#xA;	_4_2_U3_S = Surface.ByPatch(_4_2_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_2_p_U4 = Surface.PointAtParameter(_4_2_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_2_U4 = createUPlane(_4_2_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_2_direc34);&#xA;&#xA;	_4_2_U4_S = Surface.ByPatch(_4_2_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_U4_S, result);&#xA;&#xA;	/*************************JS3*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_3_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_3_p_U1 = Surface.PointAtParameter(_4_3_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_3_U1 = createUPlane(_4_3_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_3_direc12);&#xA;&#xA;	_4_3_U1_S = Surface.ByPatch(_4_3_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_3_p_U2 = Surface.PointAtParameter(_4_3_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_3_U2 = createUPlane(_4_3_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_3_direc12);&#xA;&#xA;	_4_3_U2_S = Surface.ByPatch(_4_3_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_U2_S, result);&#xA;&#xA;	_4_3_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_3_p_U3 = Surface.PointAtParameter(_4_3_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_3_U3 = createUPlane(_4_3_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_3_direc34);&#xA;&#xA;	_4_3_U3_S = Surface.ByPatch(_4_3_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_3_p_U4 = Surface.PointAtParameter(_4_3_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_3_U4 = createUPlane(_4_3_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_3_direc34);&#xA;&#xA;	_4_3_U4_S = Surface.ByPatch(_4_3_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_U4_S, result);&#xA;&#xA;	/*************************JS4*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_4_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_4_p_U1 = Surface.PointAtParameter(_4_4_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_4_U1 = createUPlane(_4_4_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_4_direc12);&#xA;&#xA;	_4_4_U1_S = Surface.ByPatch(_4_4_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_4_p_U2 = Surface.PointAtParameter(_4_4_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_4_U2 = createUPlane(_4_4_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_4_direc12);&#xA;&#xA;	_4_4_U2_S = Surface.ByPatch(_4_4_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_U2_S, result);&#xA;&#xA;	_4_4_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_4_p_U3 = Surface.PointAtParameter(_4_4_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_4_U3 = createUPlane(_4_4_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_4_direc34);&#xA;&#xA;	_4_4_U3_S = Surface.ByPatch(_4_4_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_4_p_U4 = Surface.PointAtParameter(_4_4_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_4_U4 = createUPlane(_4_4_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_4_direc34);&#xA;&#xA;	_4_4_U4_S = Surface.ByPatch(_4_4_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_U4_S, result);&#xA;&#xA;	/*************************JS5*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_5_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_5_p_U1 = Surface.PointAtParameter(_4_5_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_5_U1 = createUPlane(_4_5_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_5_direc12);&#xA;&#xA;	_4_5_U1_S = Surface.ByPatch(_4_5_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_5_p_U2 = Surface.PointAtParameter(_4_5_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_5_U2 = createUPlane(_4_5_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_5_direc12);&#xA;&#xA;	_4_5_U2_S = Surface.ByPatch(_4_5_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_U2_S, result);&#xA;&#xA;	_4_5_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_5_p_U3 = Surface.PointAtParameter(_4_5_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_5_U3 = createUPlane(_4_5_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_5_direc34);&#xA;&#xA;	_4_5_U3_S = Surface.ByPatch(_4_5_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_5_p_U4 = Surface.PointAtParameter(_4_5_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_5_U4 = createUPlane(_4_5_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_5_direc34);&#xA;&#xA;	_4_5_U4_S = Surface.ByPatch(_4_5_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_U4_S, result);&#xA;&#xA;	/*************************JS6*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_6_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_6_p_U1 = Surface.PointAtParameter(_4_6_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_6_U1 = createUPlane(_4_6_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_6_direc12);&#xA;&#xA;	_4_6_U1_S = Surface.ByPatch(_4_6_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_6_p_U2 = Surface.PointAtParameter(_4_6_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_6_U2 = createUPlane(_4_6_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_6_direc12);&#xA;&#xA;	_4_6_U2_S = Surface.ByPatch(_4_6_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_U2_S, result);&#xA;&#xA;	_4_6_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_6_p_U3 = Surface.PointAtParameter(_4_6_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_6_U3 = createUPlane(_4_6_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_6_direc34);&#xA;&#xA;	_4_6_U3_S = Surface.ByPatch(_4_6_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_6_p_U4 = Surface.PointAtParameter(_4_6_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_6_U4 = createUPlane(_4_6_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_6_direc34);&#xA;&#xA;	_4_6_U4_S = Surface.ByPatch(_4_6_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_6_U4_S, result);&#xA;&#xA;	/*************************JS7*****************************/&#xA;	/**************create U plane********************/&#xA;	_4_7_direc12 = &quot;x&quot;;&#xA;	//U1&#xA;	_4_7_p_U1 = Surface.PointAtParameter(_4_7_T1_S, 0.5, 0.0);&#xA;&#xA;	_4_7_U1 = createUPlane(_4_7_p_U1, b_04, b2_04, _4_U_h1, h2_04, _4_7_direc12);&#xA;&#xA;	_4_7_U1_S = Surface.ByPatch(_4_7_U1);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_U1_S, result);&#xA;&#xA;	//U2&#xA;	_4_7_p_U2 = Surface.PointAtParameter(_4_7_T2_S, 0.5, 1.0);&#xA;&#xA;	_4_7_U2 = createUPlane(_4_7_p_U2, b_04, b2_04, _4_U_h1, h2_04, _4_7_direc12);&#xA;&#xA;	_4_7_U2_S = Surface.ByPatch(_4_7_U2);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_U2_S, result);&#xA;&#xA;	_4_7_direc34 = &quot;y&quot;;&#xA;	//U3&#xA;	_4_7_p_U3 = Surface.PointAtParameter(_4_7_T3_S, 0.0, 0.5);&#xA;&#xA;	_4_7_U3 = createUPlane(_4_7_p_U3, b_04, b2_04, _4_U_h1, h2_04, _4_7_direc34);&#xA;&#xA;	_4_7_U3_S = Surface.ByPatch(_4_7_U3);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_U3_S, result);&#xA;&#xA;	//U4&#xA;	_4_7_p_U4 = Surface.PointAtParameter(_4_7_T4_S, 0.0, 0.5);&#xA;&#xA;	_4_7_U4 = createUPlane(_4_7_p_U4, b_04, b2_04, _4_U_h1, h2_04, _4_7_direc34);&#xA;&#xA;	_4_7_U4_S = Surface.ByPatch(_4_7_U4);&#xA;&#xA;	result = List.AddItemToEnd(_4_7_U4_S, result);&#xA;&#xA;	/***************************create fang 1********************************/&#xA;&#xA;	_4_1_p2 = Surface.PointAtParameter(_4_1_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_1_p1 = Surface.PointAtParameter(_4_2_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_1_F_p = getMidPoint(_4_1_p1, _4_1_p2, h1_04, _4_MP_dh, h_13);&#xA;&#xA;	_4_1_F_Cub = Cuboid.ByLengths(_4_1_F_p, w_13, l_13, h_13);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_F_Cub, result);&#xA;&#xA;	/***************************create fang 2********************************/&#xA;&#xA;	_4_2_p2 = Surface.PointAtParameter(_4_3_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_2_p1 = Surface.PointAtParameter(_4_4_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_2_F_p = getMidPoint(_4_2_p1, _4_2_p2, h1_04, _4_MP_dh, h_13);&#xA;&#xA;	_4_2_F_Cub = Cuboid.ByLengths(_4_2_F_p, w_14, l_14, h_13);&#xA;&#xA;	result = List.AddItemToEnd(_4_2_F_Cub, result);&#xA;&#xA;	/***************************create fang 3********************************/&#xA;&#xA;	_4_3_p2 = Surface.PointAtParameter(_4_5_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_3_p1 = Surface.PointAtParameter(_4_6_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_3_F_p = getMidPoint(_4_3_p1, _4_3_p2, h1_04, _4_MP_dh, h_13);&#xA;&#xA;	_4_3_F_Cub = Cuboid.ByLengths(_4_3_F_p, w_14, l_14, h_13);&#xA;&#xA;	result = List.AddItemToEnd(_4_3_F_Cub, result);&#xA;&#xA;	/*****************************create fang 4******************************/&#xA;&#xA;	_4_4_p = Surface.PointAtParameter(_4_7_Q_S, 0.5, 0.5);&#xA;&#xA;	_4_4_p_trans = Geometry.Translate(_4_4_p, 0.0, 0.0, _4_F_dz);&#xA;&#xA;	_4_4_F_Cub = Cuboid.ByLengths(_4_4_p_trans, w_14, l_14, h_13);&#xA;&#xA;	result = List.AddItemToEnd(_4_4_F_Cub, result);&#xA;&#xA;	/*******************************create fang 5*****************************/&#xA;&#xA;	_4_5_p = Surface.PointAtParameter(_4_7_U3_S, _4_JS_u, _4_JS_v);&#xA;&#xA;	_4_5_F_Cub = getHGFang(_4_5_p, _4_F_db, t_15, b_15, h_15);&#xA;&#xA;	result = List.AddItemToEnd(_4_5_F_Cub, result);&#xA;&#xA;	/******************************create chazhu*******************************/&#xA;&#xA;	_4_1_CZ_startP = Point.ByCoordinates(0.0, 0.0, h_16);&#xA;&#xA;	_4_1_CZ_endP = Geometry.Translate(centerPoint, 0.0, 0.0, h_01);&#xA;&#xA;	_4_1_CZ = Cylinder.ByPointsRadius(_4_1_CZ_startP, _4_1_CZ_endP, r_16);&#xA;&#xA;	result = List.AddItemToEnd(_4_1_CZ, result);&#xA;&#xA;&#xA;&#xA;	return = result;&#xA;};" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="fed45352-9bc9-48f9-8c05-aa16bf277e0f" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="-1060.87275614013" y="-4516.73362954" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="craeteDouGong(centerPoint, b1_01, h1_01, b_01, b2_01, h_01, h2_01, m,&#xA;b_02, b1_02, h1_02, h_02, b_07, b1_04, b_02, b2_04,&#xA;h_04, h2_04, h2_05, h1_04, b_04, b_06, b1_06, h1_06, h_06, b2_08,&#xA;b_08, t_08, b_10, b1_10,&#xA;h1_10, h_10, b_11, b2_12, b_12, h_12, h_09, t_09, b_09,&#xA;h_09, h_13, w_13, l_13, w_14, l_14, b1_15, t_15, b_15, h_15, h_16, r_16);" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="e72990a6-f294-4317-bf08-566a148c0ffc" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="180.503406692284" y="3234.95521260078" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" CodeText="def craeteDouGong(centerPoint, b1_01, h1_01, b_01, b2_01, h_01, h2_01, m,&#xA;b_02, b1_02, h1_02, h_02, b_07, b1_04, b_02, b2_04,&#xA;h_04, h2_04, h2_05, h1_04, b_04, b_06, b1_06, h1_06, h_06, b2_08,&#xA;b_08, t_08, b_10, b1_10,&#xA;h1_10, h_10, b_11, b2_12, b_12, h_12, h_09, t_09, b_09,&#xA;h_09, h_13, w_13, l_13, w_14, l_14, b1_15, t_15, b_15, h_15, h_16, r_16)&#xA;{&#xA;	result = {};&#xA;&#xA;	first = createFirst(centerPoint, b1_01, h1_01, b_01, b2_01, h_01, h2_01, m,&#xA;	b_02, b1_02, h1_02, h_02);&#xA;&#xA;	//result = List.AddItemToEnd(first, result);&#xA;&#xA;	second = createSecond(first[9], first[12], first[15], b_07, b2_01, b1_04,&#xA;	b_02, b2_04,h_04, h2_04, h2_05, h1_04, b_04, b_06, b1_06, h1_06, h_06,&#xA;	m, b2_08, b_08);&#xA;&#xA;	//result = List.AddItemToEnd(second, result);&#xA;&#xA;	third = createThird(second[29], second[32], second[35], second[38],&#xA;	second[41], b2_01, b1_04, b2_04, h_04, h2_04, h2_05, h1_04, b_04,&#xA;	b_07, m, t_08, b_10, b1_10, h1_10, h_10, b_11, b2_12, b_12, h_12,&#xA;	h_09, t_09, b_09);&#xA;&#xA;	//result = List.AddItemToEnd(third, result);&#xA;&#xA;	fourth = createFourth(third[0], third[1], third[47], third[50], third[53],&#xA;	third[56], third[59], b2_01, b1_04, h_09, b2_04, h_04, h2_04, h2_05,&#xA;	h1_04, b_04, h_13, w_13, l_13, w_14, l_14, b1_15, t_15, b_15, h_15,&#xA;	centerPoint, h_01, h_16, r_16);&#xA;&#xA;	//result = List.AddItemToEnd(fourth, result);&#xA;&#xA;	//result = List.Join(first);&#xA;	//result = List.Join(second);&#xA;	//result = List.Join(third);&#xA;	//result = List.Join(fourth);&#xA;&#xA;	result = List.Join({first, second, third, fourth});&#xA;&#xA;&#xA;&#xA;	return = result;&#xA;&#xA;};" ShouldFocus="false" />
    <PythonNodeModels.PythonNode guid="25b9cc93-2574-45a6-af30-245ca78a1294" type="PythonNodeModels.PythonNode" nickname="Python Script" x="440.245012776341" y="-4259.82340922206" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#该节点的输入内容将存储为 IN 变量中的一个列表。
dataEnteringNode = IN

#将输出内容指定给 OUT 变量。
OUT = 0</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="b94f2949-d965-4ca2-bd39-5fb2c96aa025" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Document.ActiveView" x="111.621158488218" y="-4255.71114601362" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" assembly="RevitNodes.dll" function="Revit.Application.Document.ActiveView" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="d933ea9d-d8a6-4d05-ac6a-3b10c1927753" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Document.Current" x="-163.682964647675" y="-4243.01424760003" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" assembly="RevitNodes.dll" function="Revit.Application.Document.Current" />
    <CoreNodeModels.Watch guid="0e649c31-e48c-427b-bd47-49b3408d39ed" type="CoreNodeModels.Watch" nickname="Watch" x="186.629014812307" y="-3952.50699803522" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" />
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="d2085207-53fb-48f9-9878-ce2ac849527f" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="33" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d2085207-53fb-48f9-9878-ce2ac849527f" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="33" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="678de147-592d-4364-a019-343093be90d2" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="48" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="678de147-592d-4364-a019-343093be90d2" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="48" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="79b9eac5-6126-4de9-9d79-fd1df2bf256a" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="45" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="79b9eac5-6126-4de9-9d79-fd1df2bf256a" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="45" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="45eb9376-dd25-47ef-910f-2e9dd4f7d17e" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="42" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="45eb9376-dd25-47ef-910f-2e9dd4f7d17e" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="42" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="aa79ecb8-58cd-4948-b5c1-ca054dba4eac" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="43" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="aa79ecb8-58cd-4948-b5c1-ca054dba4eac" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="43" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b2770c1-7471-4df9-90ce-4e052a223ec7" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="38" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b2770c1-7471-4df9-90ce-4e052a223ec7" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="46" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b2770c1-7471-4df9-90ce-4e052a223ec7" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="38" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b2770c1-7471-4df9-90ce-4e052a223ec7" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="46" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f4950276-5946-42b8-9a8f-65bcb442f7ed" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="40" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f4950276-5946-42b8-9a8f-65bcb442f7ed" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="40" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7c7368c6-c311-4aaf-a4d2-6334f195585f" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7c7368c6-c311-4aaf-a4d2-6334f195585f" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0110c7ed-43be-4a1c-9605-4c99655ecc29" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0110c7ed-43be-4a1c-9605-4c99655ecc29" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1aef89b8-5bc1-4ab2-a231-d8ed9a17c1ab" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="1aef89b8-5bc1-4ab2-a231-d8ed9a17c1ab" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="42ff6256-589d-4f9c-9289-c315ab77e63d" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="6" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="42ff6256-589d-4f9c-9289-c315ab77e63d" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="6" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="25cd4e99-94de-459b-954a-9a25560105f6" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="25cd4e99-94de-459b-954a-9a25560105f6" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="83654766-3bca-4b6b-a4a4-ab79a6d766f6" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="83654766-3bca-4b6b-a4a4-ab79a6d766f6" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3dfe2b18-a428-496b-872c-4a8e12d62e00" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="13" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3dfe2b18-a428-496b-872c-4a8e12d62e00" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="13" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="32400e44-d45e-4738-af66-93cd0e2c1045" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="18" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="32400e44-d45e-4738-af66-93cd0e2c1045" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="18" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f7ccc2df-1e40-4438-9e5c-281a04cf7f74" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="19" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f7ccc2df-1e40-4438-9e5c-281a04cf7f74" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="19" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="14" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="26" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="28" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="36" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="44" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="39" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="41" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="14" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="26" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="28" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="36" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="39" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="41" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3785db76-36b0-482c-b0b0-65229395b783" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="44" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="35411072-d811-4314-82b7-670e29a03c5d" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="15" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="35411072-d811-4314-82b7-670e29a03c5d" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="15" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0ee57d16-d1be-44a2-b6c2-e6232b4469bc" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="16" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0ee57d16-d1be-44a2-b6c2-e6232b4469bc" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="16" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5501f1e-f14a-441e-9b15-88a720ec7ecd" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="17" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5501f1e-f14a-441e-9b15-88a720ec7ecd" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="17" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a247819c-52bb-426b-b65b-ee705c978791" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="20" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a247819c-52bb-426b-b65b-ee705c978791" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="20" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c2510042-c434-410c-86a6-f385cb925f98" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="22" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c2510042-c434-410c-86a6-f385cb925f98" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="22" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f30bcd95-591d-4014-926b-09f51d72e956" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="23" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f30bcd95-591d-4014-926b-09f51d72e956" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="23" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d27bf3df-e0f0-47aa-bf7e-40542416c99d" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="24" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d27bf3df-e0f0-47aa-bf7e-40542416c99d" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="24" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="db0836da-dc9f-42ac-899d-bd20ea16f789" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="8" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="db0836da-dc9f-42ac-899d-bd20ea16f789" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="8" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="973651d4-a263-425b-b9c3-69d478e92a4b" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="12" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="973651d4-a263-425b-b9c3-69d478e92a4b" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="12" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6ee453e0-acf3-4638-8ed7-bbd4898be5f9" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="27" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6ee453e0-acf3-4638-8ed7-bbd4898be5f9" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="27" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="fde7e01b-a6ac-4f70-a90c-553803fa8edb" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="29" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="fde7e01b-a6ac-4f70-a90c-553803fa8edb" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="29" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="37d652a2-5e3c-407b-9dee-b5537aee585d" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="32" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="37d652a2-5e3c-407b-9dee-b5537aee585d" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="32" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="30" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="34" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="35" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="30" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="34" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a937013d-d544-4e49-8806-32b3bbfa0205" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="35" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7fe5c62e-2944-4851-bb43-476cc71354a1" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="37" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7fe5c62e-2944-4851-bb43-476cc71354a1" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="37" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bc347a09-6be6-4b0f-a395-80a244d31d6e" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="31" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bc347a09-6be6-4b0f-a395-80a244d31d6e" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="31" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d06fe0f2-6d6a-4519-bed4-365f372ea5f8" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="47" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d06fe0f2-6d6a-4519-bed4-365f372ea5f8" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="47" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bcc85b4a-1a40-4656-acb7-e020c6bcfa51" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="5" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bcc85b4a-1a40-4656-acb7-e020c6bcfa51" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="5" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b9dd35e4-fc01-486c-9e75-0514d1513bb9" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="7" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b9dd35e4-fc01-486c-9e75-0514d1513bb9" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="7" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b16d67c8-641f-4993-8e4e-cc7bb78a0ee0" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="10" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b16d67c8-641f-4993-8e4e-cc7bb78a0ee0" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="10" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3c05d49d-0168-4da2-9d41-9bebaa46ed48" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="11" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3c05d49d-0168-4da2-9d41-9bebaa46ed48" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="11" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0dc65791-bde4-4893-ace8-893546fb042a" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="9" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0dc65791-bde4-4893-ace8-893546fb042a" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="9" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="20003c2a-88bb-48e4-beb1-f9cac029c51c" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="21" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="20003c2a-88bb-48e4-beb1-f9cac029c51c" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="21" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3ec19aae-711b-48f7-8f48-4b12b1cda135" start_index="0" end="b49a469f-4a27-4fec-b261-cd823ba16b36" end_index="25" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3ec19aae-711b-48f7-8f48-4b12b1cda135" start_index="0" end="fed45352-9bc9-48f9-8c05-aa16bf277e0f" end_index="25" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b94f2949-d965-4ca2-bd39-5fb2c96aa025" start_index="0" end="0e649c31-e48c-427b-bd47-49b3408d39ed" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b94f2949-d965-4ca2-bd39-5fb2c96aa025" start_index="0" end="25b9cc93-2574-45a6-af30-245ca78a1294" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d933ea9d-d8a6-4d05-ac6a-3b10c1927753" start_index="0" end="b94f2949-d965-4ca2-bd39-5fb2c96aa025" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="af42b2d7-4dfc-4572-ae37-39edbb65ebe9" annotationText="Utils" left="-8563.87026169732" top="3052.17874885186" width="4958.39701457578" height="3645.00798359581" fontSize="96" InitialTop="3177.17874885186" InitialHeight="3550.00798359581" TextblockHeight="115" backgrouund="#FFC1D676">
      <Models ModelGuid="b4507afa-aec1-48bf-938a-bb1176acde48" />
      <Models ModelGuid="e33ede6c-2584-4453-a710-d069a8839c71" />
      <Models ModelGuid="f175e972-ff1d-42e6-a572-0733af4a5991" />
      <Models ModelGuid="3c56039a-0c02-4545-a8c1-1ddeaba22086" />
      <Models ModelGuid="c28abe09-46d8-4f3e-b911-cf862febad42" />
      <Models ModelGuid="2b11fee3-ada1-486a-b10f-7285bc5c4799" />
      <Models ModelGuid="0a7c427b-41be-4928-98fd-10e91ce54375" />
      <Models ModelGuid="efac0dde-5c4f-4a21-b45f-dbb2bfc5e7e5" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="98da0468-de97-44bc-946b-50624229a940" annotationText="Expaned Utils" left="-3192.02356610669" top="3066.21380723588" width="4044.52697279897" height="13869.1961610545" fontSize="96" InitialTop="3191.21380723588" InitialHeight="13774.1961610545" TextblockHeight="115" backgrouund="#FFC1D676">
      <Models ModelGuid="21945698-52b6-494b-aa94-4290e1f6c8b1" />
      <Models ModelGuid="09867794-6407-4d0e-a055-1aa860df6dce" />
      <Models ModelGuid="5531b4a7-5517-4c1d-9418-3cd608a448e1" />
      <Models ModelGuid="7a8d6cb8-4424-4325-a13f-c35bc58b502a" />
      <Models ModelGuid="e72990a6-f294-4317-bf08-566a148c0ffc" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="背景预览" eyeX="614.063477735038" eyeY="261.282419372059" eyeZ="796.228188108459" lookX="-447.051490482109" lookY="-103.245456807022" lookZ="-660.028488509445" upX="0.0488762969736958" upY="0.996194687413166" upZ="0.0721611491507936" />
  </Cameras>
</Workspace>